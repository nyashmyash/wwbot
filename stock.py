import copy
import random
#from hero import Hero

# —Å–∏–ª–∞ –ª–æ–≤–∫–∞ —É–¥–∞—á–∞ –º–µ—Ç–∫–æ—Å—Ç—å —Ö–∞—Ä–∏–∑–º–∞ hp –≥–æ–ª–æ–¥


used_items = {100: {"name": "—Å—ã—Ä–æ–µ –º—è—Å–æ", "hungry": 30, "hp": 2},
              101: {"name": "–∂–∞—Ä–µ–Ω–∞—è –∫—É—Ä–∏—Ü–∞", "hungry": 25, "hp": 3},
              102: {"name": "–∫–∞—Ä—Ç–æ—à–∫–∞", "hungry": 20, "hp": 1},
              103: {"name": "—Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞", "hungry": 15},
              104: {"name": "–º—É—Ç–∞–Ω—Ç—Å–∫–∏–π —Å–∞–ª–∞—Ç", "hungry": 15, "hp": -3},
              105: {"name": "–∂–∞—Ä–µ–Ω–Ω–æ–µ –º—è—Å–æ", "hungry": 35, "hp": 5},
              106: {"name": "–≥–Ω–∏–ª–æ–µ –º—è—Å–æ", "hungry": 25, "hp": -2},
              107: {"name": "–≤–æ–Ω—é—á–∞—è –∂–∏–∂–∞", "hungry": 30, "hp": -5},
              108: {"name": "—Ö–æ–º—è—á–æ–∫", "hungry": 15, "hp": -1},
              109: {"name": "–∫—Ä—ã—Å–∞", "hungry": 10, "hp": -2},
              110: {"name": "–∞–ø—Ç–µ—á–∫–∞", "hp": 10, "hungry": 10},
              111: {"name": "–±–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞", "hp": 30, "hungry": 10},
              112: {"name": "–∫–æ–Ω—Å–µ—Ä–≤—ã", "hp": 10, "hungry": 35},
              113: {"name": "–≥–Ω–∏–ª—ã–µ —Ñ—Ä—É–∫—Ç—ã", "hp": -3, "hungry": 35},
              114: {"name": "–≤—è–ª–µ–Ω–æ–µ –º—è—Å–æ", "hungry": 40},
              200: {"name": "–ø–∏–≤–æ", "force": 10, "luck": 20, "km": 10},
              201: {"name": "–≤–∏–Ω–æ", "force": 15, "luck": 20, "km": 20},
              202: {"name": "–≤–æ–¥–∫–∞", "force": 30, "luck": 50, "km": 30},
              203: {"name": "–∞–±—Å–µ–Ω—Ç", "force": 50, "luck": 60, "km": 40},
              204: {"name": "—É—Ä–∞–Ω–æ–≤–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞", "force": 70, "luck": 60, "km": 50},
              205: {"name": "—Å—Ç–µ—Ä–æ–∏–¥—ã", "dexterity": 100, 'accuracy': 50, "km": 20},
              206: {"name": "–∞–Ω–∞–±–æ–ª–∏–∫–∏", "dexterity": 150, 'accuracy': 100, "km": 30},
              207: {"name": "–º–µ–ª—å–¥–æ–Ω–∏–π", "dexterity": 200, 'accuracy': 250, "km": 40},
              300: {"name": "üíâ–ú–µ–¥-–•", 'hp': 50},
              301: {"name": "üíå–ú–µ–¥–ø–∞–∫", 'hp': 80},
              302: {"name": "üß™–°—Ç–∏–º–±–ª–∞—Å—Ç", 'hp': 120, "km_heal": 3},
              303: {"name": "üß™–°—Ç–∏–º–±–ª–∞—Å—Ç+", 'hp': 150, "km_heal": 5},

              }
# used_items = {100: {"name": "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä", "hungry": 30, "hp": 2},
#               101: {"name": "–ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ '–ë—Ä–∏–∑'", "hungry": 25, "hp": 3},
#               102: {"name": "–ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π", "hungry": 20, "hp": 1},
#               103: {"name": "–º–∞–ª—ã–π –±–∞–ª–ª–æ–Ω", "hungry": 15},
#               104: {"name": "–≥—Ä—è–∑–Ω—ã–π —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä", "hungry": 15, "hp": -3},
#               105: {"name": "–±–æ–ª—å—à–æ–π –±–∞–ª–ª–æ–Ω", "hungry": 35, "hp": 5},
#               106: {"name": "—Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑–∞", "hungry": 25, "hp": -2},
#               107: {"name": "–ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ –ì–ü-5", "hungry": 30},
#               108: {"name": "—Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä '–ò—Å—Ç–æ–∫'", "hungry": 15},
#               109: {"name": "–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Å–∫–∞", "hungry": 10, "hp": -2},
#               110: {"name": "–∞–ø—Ç–µ—á–∫–∞", "hp": 10, "hungry": 10},
#               111: {"name": "–±–æ–ª—å—à–∞—è –∞–ø—Ç–µ—á–∫–∞", "hp": 30, "hungry": 10},
#               112: {"name": "—Ñ–∏–ª—å—Ç—Ä—ã –∞—Ä–º–µ–π—Å–∫–∏–µ –¥–ª—è –ø–≥", "hp": 10, "hungry": 35},
#               113: {"name": "–ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ –∞—Ä–º–µ–π—Å–∫–∏–π –ü–ë–§ '–•–æ–º—è–∫'", "hp": -3, "hungry": 35},
#               114: {"name": "–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–π –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ì–ü-7", "hungry": 40},
#               200: {"name": "–ø–∏–≤–æ", "force": 10, "luck": 20, "km": 10},
#               201: {"name": "–≤–∏–Ω–æ", "force": 15, "luck": 20, "km": 20},
#               202: {"name": "–≤–æ–¥–∫–∞", "force": 30, "luck": 50, "km": 30},
#               203: {"name": "–∞–±—Å–µ–Ω—Ç", "force": 50, "luck": 60, "km": 40},
#               204: {"name": "—É—Ä–∞–Ω–æ–≤–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞", "force": 70, "luck": 60, "km": 50},
#               205: {"name": "—Å—Ç–µ—Ä–æ–∏–¥—ã", "dexterity": 20, 'accuracy': 10, "km": 20},
#               206: {"name": "–∞–Ω–∞–±–æ–ª–∏–∫–∏", "dexterity": 30, 'accuracy': 20, "km": 30},
#               207: {"name": "–º–µ–ª—å–¥–æ–Ω–∏–π", "dexterity": 50, 'accuracy': 50, "km": 40},
#               300: {"name": "üíâ–ú–µ–¥-–•", 'hp': 50},
#               301: {"name": "üíå–ú–µ–¥–ø–∞–∫", 'hp': 80},
#               302: {"name": "üß™–°—Ç–∏–º–±–ª–∞—Å—Ç", 'hp': 120, "km_heal": 3},
#               303: {"name": "üß™–°—Ç–∏–º–±–ª–∞—Å—Ç+", 'hp': 150, "km_heal": 5},
#
#               }


def get_random_item(med: bool = False) -> (int, dict):
    if not med:
        if random.randint(0, 1):
            return get_random_food()
        else:
            return get_random_buff()
    else:
        med = random.randint(300, 303)
        return med, used_items[med]


def get_random_buff() -> (int, dict):
    buff = random.randint(200, 207)
    return buff, used_items[buff]


def get_random_food() -> (int, dict):
    food = random.randint(100, 114)
    return food, used_items[food]


class Stock:
    equip = None
    used_stuff = None
    MAX_EQUIP = 12

    def get_data_lombard(self) -> str:
        out = "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å:\n\n"
        for w in self.equip:
            out += self.equip[w].get_data_cost() + "\n"
        return out

    def add_stuff(self, key) -> None:
        if not self.used_stuff.get(key, None):
            self.used_stuff[key] = 1
        else:
            self.used_stuff[key] += 1

    def use_stuff(self, code: int, hero: object) -> str:
        stf = self.used_stuff.get(code, None)
        if stf:
            if self.used_stuff[code] == 1:
                self.used_stuff.pop(code)
            else:
                self.used_stuff[code] -= 1

            hun = used_items[code].get("hungry", 0)
            hero.hungry -= hun
            if hero.hungry < 0:
                hero.hungry = 0;
            hp = used_items[code].get("hp", 0)
            hero.hp += hp
            force = dex = luck = accur = 0
            if code // 100 != 1:
                force = used_items[code].get("force", 0)
                dex = used_items[code].get("dexterity", 0)
                luck = used_items[code].get("luck", 0)
                accur = used_items[code].get("accuracy", 0)
                hero.km_buff = used_items[code].get("km", 0)
                hero.km_heal = used_items[code].get("km_heal", 0)
            outstr = ""
            if hun:
                outstr += f"üçó-{hun}% "
            if hp > 0:
                outstr += f"‚ù§+{hp} "
            elif hp < 0:
                outstr += f"üíî{hp} "
            if force:
                outstr += f"üí™+{force} "
                hero.buffs[0] = force
            if dex:
                outstr += f"ü§∏üèΩ‚Äç‚ôÇÔ∏è+{dex} "
                hero.buffs[1] = dex
            if luck:
                outstr += f"üëº+{luck} "
                hero.buffs[2] = luck
            if accur:
                outstr += f"üéØ+{accur} "
                hero.buffs[3] = accur


            return f"–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {used_items[code]['name']}\n {outstr}\n"
        return "–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ"

    def print_stuff(self, code: int = 1) -> str:
        out = ""
        for k in self.used_stuff:
            if k // 100 == code and self.used_stuff[k]:
                out += f"{used_items[k].get('name')}({self.used_stuff[k]}) /ustf_{k}\n"
        if out == "":
            return " –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ \n"
        else:
            return out

    def add_item(self, item: object) -> None:
        if len(self.equip) == self.MAX_EQUIP:
            return
        new_item = copy.copy(item)
        while self.equip.get(new_item.get_code(), None):
            new_item.z += 1
        new_item.use = 0
        self.equip[new_item.get_code()] = new_item

    def get_delete(self) -> str:
        out = "üéí–°–û–î–ï–†–ñ–ò–ú–û–ï –†–Æ–ö–ó–ê–ö–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø\n"
        cnt = len(self.equip)
        out += f"–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ ({cnt}/{self.MAX_EQUIP})\n"
        for w in self.equip:
            out += self.equip[w].get_data_drop() + "\n"
        return out

    def get_data(self) -> str:
        out = "üéí–°–û–î–ï–†–ñ–ò–ú–û–ï –†–Æ–ö–ó–ê–ö–ê\n"
        out += "   –ü–æ–ª–µ–∑–Ω–æ–µ\n"
        out += self.print_stuff(3)
        cnt = len(self.equip)
        out += f"–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ ({cnt}/{self.MAX_EQUIP})\n"
        for w in self.equip:
            out += self.equip[w].get_data() + "\n"
        out += "\n–µ–¥–∞ /food \n–±–∞—Ñ—Ñ—ã /buff \n–≤—ã–∫–∏–Ω—É—Ç—å /drop\n–º–æ–±—ã –≤ –∫–æ–º–∞–Ω–¥–µ /mobs"
        return out
