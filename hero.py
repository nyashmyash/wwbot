from string import ascii_lowercase
from random import sample
from mob import *
import random
import copy
from armor import stack_buff, armor_all
from weapon import weapons_all
from stock import get_random_item, used_items
from db.models import HeroDB, WeaponDB
from drone import all_drones, perk_drone_list
from rand import randint
all_modules = {
    1: [25, "üì•–º–æ–¥—É–ª—å —Å–∏–ª—ã"],
    2: [100, "üì•–º–æ–¥—É–ª—å –ª–æ–≤–∫–æ—Å—Ç–∏"],
    3: [100, "üì•–º–æ–¥—É–ª—å —É–¥–∞—á–∏"],
    4: [50, "üì•–º–æ–¥—É–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏"],
    5: [5, "üì•–º–æ–¥—É–ª—å —Ö–ø"],
    6: [15, "üì•–º–æ–¥—É–ª—å –¥–æ—Ö–æ–¥–∞"],
    7: [2.5, "üì•–º–æ–¥—É–ª—å –≤–∞–º–ø–∏—Ä–∏–∑–º–∞"]
}
perk_force_list = [1.1, 1.3, 1.5, 1.7]
perk_arm_list = [1.2, 1.4, 1.8, 2]
perk_dex_list = [1.2, 1.5, 2, 3]
perk_accur_list = [1.2, 1.4, 1.6, 2]
#char
perk_luck_list = [1.2, 1.5, 2, 3]



text_mess_go = ["–í—ã –æ–±—Å–ª–µ–¥–æ–≤–∞–ª–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π –¥–æ–º, –Ω–æ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏.",
                "–í—ã–±–µ–∂–∞–ª–∞ –¥–∏–∫–∞—è —Å–æ–±–∞–∫–∞, –Ω–æ –≤—ã –Ω–∞ –Ω–µ–µ –∫—Ä–∏–∫–Ω—É–ª–∏ –∏ –æ–Ω–∞ –ø–æ–¥–∂–∞–≤ —Ö–≤–æ—Å—Ç —Å–ø—Ä—è—Ç–∞–ª–∞—Å—å. –í—ã –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–æ–µ–º –≤ –∑–∞–±–æ—Ä–µ.",
                "–ü—Ä–æ–π–¥—è –æ–∫–æ–ª–æ –æ–±—É–≥–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω, –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∞ –∫–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞. –°—Ç—Ä–∞—à–Ω–æ–µ –∑—Ä–µ–ª–∏—â–µ, –ª—É—á—à–µ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.",
                "–í—ã —É–≤–∏–¥–µ–ª–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π –¥–æ–º, –æ–±–ª–∞–∑–∏–ª–∏ –µ–≥–æ –∏ —Ç–∞–º –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.",
                "–í—ã –ø—Ä–æ—à–ª–∏ –ø–æ –Ω–µ–±–æ–ª—å—à–æ–º—É –ø–∞—Ä–∫—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –æ–±—É–≥–ª–µ–Ω–Ω—ã–µ –ø–µ–Ω—å–∫–∏ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∏—Å–∫–∞—Ä–µ–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É–∏ –∏ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã."
                "–ü—Ä–æ–±–∏—Ä–∞—è—Å—å –ø–æ —á–∞—â–µ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –º—É—Ç–∞–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–æ—è–ª—Å—è –≤–∞—Å –∏ –ø–æ–±–µ–∂–∞–ª –ø–æ —Å–≤–æ–∏–º –¥–µ–ª–∞–º.",
                "–ö—Ç–æ-—Ç–æ —Å—Ç–∞–ª –∫—Ä–∏—á–∞—Ç—å –∑–∞ –¥–æ–º–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ–ø–∞—Å–Ω—ã–π –º–æ–Ω—Å—Ç—Ä –∏–ª–∏ –±–∞–Ω–¥–∏—Ç –ø—Ä–∏–º–∞–Ω–∏–≤–∞—é—â–∏–π –∂–µ—Ä—Ç–≤—É, –ª—É—á—à–µ –∏–¥–∏—Ç–µ –¥–∞–ª—å—à–µ.",
                "–í—ã —Å–ø–æ–∫–æ–π–Ω–æ –ø—Ä–æ—à–ª–∏ –ø–æ —Ç—Ä–æ–ø–∏–Ω–∫–µ –∏ –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –≤–æ–∑–ª–µ –±–æ–ª—å—à–æ–≥–æ –¥–µ—Ä–µ–≤–∞",
                "–ü—Ä–æ–π–¥—è –ø–∞—Ä—É —à–∞–≥–æ–≤, –Ω–∞ –≤–∞—Å –Ω–∞–±—Ä–æ—Å–∏–ª—Å—è –∫–∞–∫–æ–π-—Ç–æ –ø—Å–∏—Ö, –Ω–æ –ø–æ–ª—É—á–∏–≤ –ø–æ —à–µ–µ, –æ–Ω —Å–±–µ–∂–∞–ª –≤—ã–∫—Ä–∏–∫–∏–≤–∞—è –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã.",
                "–í—ã –∑–∞—à–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–∏ –æ—Ç –±–∞–Ω–∫–∞, –ø–æ–ª–∞–∑–∏–ª–∏ –ø–æ —à–∫–∞—Ñ—á–∏–∫–∞–º, –Ω–æ –¥–µ–Ω–µ–≥ —Ç–∞–º –¥–∞–≤–Ω–æ –Ω–µ—Ç.",
                "–ù–∞—Å–≤–∏—Å—Ç—ã–≤–∞—è –ø–µ—Å–µ–Ω–∫—É –≤—ã –ø–æ–¥–æ—à–ª–∏ –∫ —à–∫–æ–ª–µ, —á—Ç–æ —Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ. –ù–æ –≤—ã —Ä–µ—à–∏–ª–∏ –∑–∞–≥–ª—è–Ω—É—Ç—å —Ç—É–¥–∞. –¢–∞–º —Ç–æ–ª—å–∫–æ –ª–∞–∑–∏–ª —Å–≤–∏–Ω–æ–∫—Ä—ã—Å –∏ –µ–ª —á—Ç–æ-—Ç–æ.",
                "–í–æ–∑–ª–µ –≤–∞—Å –ø—Ä–æ—Å–≤–∏—Å—Ç–µ–ª–∞ –ø—É–ª—è, —ç—Ç–æ –∫–∞–∫–æ–π-—Ç–æ —Å–Ω–∞–π–ø–µ—Ä. –í—ã –ª–µ–≥–ª–∏ –Ω–∞ –∑–µ–º–ª—é –∏ –ø–µ—Ä–µ–∫–∞—Ç–∏–ª–∏—Å—å –≤ –∫—É—Å—Ç—ã –ø–µ—Ä–µ–∂–∏–¥–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å.",
                "–ì—É–ª—è—Ç—å —Ö–æ—Ä–æ—à–æ, –Ω–æ –∏ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞–¥–æ –∏–Ω–æ–≥–¥–∞. –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –¥—É—Ö –∏ –≤—ã–ø–∏–ª–∏ –≤–æ–¥—ã.",
                "–í—ã –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª–∏—Å—å –∏ —Å–µ–ª–∏ –≤ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–º –∫–∞—Ñ–µ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—à–∫–æ–π.",
                "–ò–¥—è –≤–æ–∑–ª–µ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–≥–æ –¥–æ–º–∞, –≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –∑–∞–π—Ç–∏ –≤ –Ω—É—Ç—Ä—å, –Ω–æ –Ω–∞ –≤–∞—Å –Ω–∞–±—Ä–æ—Å–∏–ª—Å—è —Å–≤–∏–Ω–æ–∫—Ä—ã—Å. –í—ã –º–µ—Ç–∫–æ –µ–º—É –ø—Ä–æ–±–∏–ª–∏ –±–æ—à–∫—É –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–≤ –¥–æ–º –ø–æ–±—Ä–µ–ª–∏ –¥–∞–ª—å—à–µ",
                "–ö–∞–∂–µ—Ç—Å—è, –º–∞—à–∏–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∞—à–ª–∏ –Ω–∞ —Ö–æ–¥—É, –º–æ–∂–Ω–æ –ø–æ–µ—Ö–∞—Ç—å. –ù–æ –∫–æ–≥–¥–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–ª—Å—è, –æ–Ω –≤–∑–æ—Ä–≤–∞–ª—Å—è, —Ç—É–¥–∞ –∑–∞–ª–µ–∑ –∫–∞–∫–æ–π-—Ç–æ –æ–ø–∞—Å–Ω—ã–π —Ä–∞–¥-—Ç–∞—Ä–∞–∫–∞–Ω. –û–±–∏–¥–Ω–æ.",
                "–ß—Ç–æ-—Ç–æ –∏–∑–¥–∞–µ—Ç –∫—Ä–∏–∫. –ü–æ –∑–≤—É–∫—É –ø–æ—Ö–æ–∂–µ –Ω–∞ –ª–µ—Ç–∞—é—â–µ–≥–æ –º—É—Ç–∞–Ω—Ç–∞, –ª—É—á—à–µ —É—Å–∫–æ—Ä–∏—Ç—å—Å—è –∏ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.",
                "–í –¥–∞–ª–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫—É–Ω–∑–∞, –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ –∏ –¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç –Ω–µ–≥–æ –ø–æ–¥–∞–ª—å—à–µ.",
                "–ì–¥–µ-—Ç–æ —Å–ª—ã—à–Ω–∞ —Å—Ç—Ä–µ–ª—å–±–∞, –Ω–∞–≤–µ—Ä–Ω–æ–µ —ç—Ç–æ —Ä–∞–∑–±–æ—Ä–∫–∏ –º–µ—Å—Ç–Ω—ã—Ö –±–∞–Ω–¥. –ù–∞–¥–æ —Å–≤–µ—Ä–Ω—É—Ç—å.",
                "–í—ã —É—Å–ª—ã—à–∞–ª–∏ –∫–∞–∫ –∫–≤–∞–∫–∞–µ—Ç –æ—á–µ–Ω—å –æ–ø–∞—Å–Ω–∞—è –º–∏—Ñ–∏—á–µ—Å–∫–∞—è –∂–∞–±–∞, –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–∂—Ä–∞–≤—à–∞—è—Å—è —Ä–∞–¥ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤ –∏ –¥–æ–≤–æ–ª—å–Ω–∞—è. –õ—É—á—à–µ –æ–±–æ–π—Ç–∏ –º–µ—Å—Ç–æ –æ—Ç–∫—É–¥–∞ –µ–µ —Å–ª—ã—à–Ω–æ.",
                "–í—ã –ø—Ä–æ—à–ª–∏ –ø–æ –Ω–µ–±–æ–ª—å—à–æ–º—É –∫–ª–∞–¥–±–∏—â—É, —Ç—É—Ç –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.",
                "–í—ã –ø—Ä–æ—à–ª–∏ –ø–æ —Ä–∞–∑—Ä—É—à–∞—é—â–µ–º—É—Å—è –º–æ—Å—Ç—É, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–∏—à–ª–æ—Å—å –∏–∑—Ä—è–¥–Ω–æ –ø–æ–ø—Ä—ã–≥–∞—Ç—å —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å.",
                "–î—É–º–∞—Ç—å –≤—Ä–µ–¥–Ω–æ –≤ –ø—É—Å—Ç–æ—à–∏, –≤–¥—Ä—É–≥ –Ω–∞–ø–∞–¥–µ—Ç –≥–æ–ª–æ–¥–Ω—ã–π –º–æ–Ω—Å—Ç—Ä. –¢–∞–∫ —á—Ç–æ –Ω–∞–¥–æ –±—ã—Ç—å –Ω–∞ –≥–æ—Ç–æ–≤–µ.",
                "–°–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –∑–∞—á–µ–º –Ω—É–∂–Ω–∞ –º–µ—Ç–∫–æ—Å—Ç—å, –Ω–æ –µ—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—à—å—Å—è –ø–æ —Å–≤–∏–Ω–æ–∫—Ä—ã—Å—É –æ—á–µ–Ω—å –æ–±–∏–¥–Ω–æ. –í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Å—Ç—Ä–µ–ª—å–±—É –ø–æ –∂–µ–ª–µ–∑–Ω—ã–º –±–∞–Ω–∫–∞–º.",
                "–û–ø—è—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Ä–∞–∑–±–æ—Ä–∫–∏ –±–∞–Ω–¥–∏—Ç–æ–≤, –Ω–æ –≤ –∏—Ç–æ–≥–µ –º—É—Ç–∞–Ω—Ç—ã –∏—Ö –≤—Å–µ—Ö —Å–æ–∂—Ä–∞–ª–∏. –°—É—Ä–æ–≤–æ –≤ –ø—É—Å—Ç–æ—à–∏.",
                "–ù–∞ –≤–∞—Å —É—Å—Ç–∞–≤–∏–ª—Å—è —á—É–∂–æ–π, –Ω–∞–¥–æ –±–µ–∂–∞—Ç—å, —Ñ–∏–≥ –∑–Ω–∞–µ—Ç –∫–∞–∫ –æ–Ω —Å—é–¥–∞ –ø–æ–ø–∞–ª, –≤—ã —Å—Ç—Ä–µ–ª—å–Ω—É–ª–∏ –∏–∑ –±–ª–∞—Å—Ç–µ—Ä–∞ –∏ —Å–ø—É–≥–Ω—É–ª–∏ –µ–≥–æ.",
                "–†–∞–¥-–ø—É—Å—Ç–æ—à—å —Å—Ç—Ä–∞—à–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–∞–ø–∞—Å—Ç—å –º–æ–∂–µ—Ç –∫—Ç–æ —É–≥–æ–¥–Ω–æ. –ù–∞–¥–æ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.",
                "–£–∂–µ –Ω–æ—á—å, –Ω–∞–¥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –†—è–¥–æ–º –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –¥–æ–º, –æ–±—Å–ª–µ–¥—É—è –µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ü–µ–ª—É—é –∫—Ä–æ–≤–∞—Ç—å –∏ –ª–µ–≥–ª–∏ –ø–æ—Å–ø–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ.",
                "–ß–µ—Ä—Ç–æ–≤—ã–µ —Ä–∞–¥ —Ç–∞—Ä–∞–∫–∞–Ω—ã —Å—ä–µ–ª–∏ –≤—Å—é –µ–¥—É –∏–∑ —Ä—é–∫–∑–∞–∫–∞. –ù–∞–¥–æ –∏—Å–∫–∞—Ç—å –µ–¥—É.",
                "–ó–∞ –∞–ø—Ç–µ—á–∫–∞–º–∏ –í—ã –∑–∞—à–ª–∏ –≤ –±–æ–ª—å–Ω–∏—Ü—É, –Ω–æ —Ç–∞–º –¥–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –∏ –≤—Å–µ —Å–≥–Ω–∏–ª–æ.",
                "–í—ã —É–≤–∏–¥–µ–ª–∏ –∞–≤—Ç–æ–±—É—Å —Å –ª—é–¥—å–º–∏, –∞ –Ω–µ—Ç —ç—Ç–æ –Ω–µ –ª—é–¥–∏ - —ç—Ç–æ —Å–∫–µ–ª–µ—Ç—ã. –ê —Ä—è–¥–æ–º —Å–Ω—É—é—Ç –æ–ø–∞—Å–Ω—ã–µ —Å–æ–±–∞–∫–∏.",
                "–ó–∞ –≤–∞–º–∏ —à–µ–ª –º—É—Ç–∞–Ω—Ç, –æ–Ω –Ω–∞–ø–∞–ª –Ω–æ —Ä–µ–ª–µ–∫—Å—ã –Ω–µ –ø–æ–¥–≤–µ–ª–∏ –∏ –≤—ã –º–µ—Ç–∫–∏–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º —Å–Ω–µ—Å–ª–∏ –µ–º—É –±–æ—à–∫—É.",
                "–ó–∞–π–¥—è –≤ –æ–±–≥–æ—Ä–µ–≤—à—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ü–µ–ª–µ–≤—à–∏—Ö –∫–Ω–∏–≥. '–ù–∞–¥–æ –≤–∑—è—Ç—å –∏—Ö —Å —Å–æ–±–æ–π –ø–æ—á–∏—Ç–∞—Ç—å' - –ø–æ–¥—É–º–∞–ª–∏ –≤—ã",
                "–õ–µ—Å –∫–∞–∑–∞–ª—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –∏ —Å—Ç—Ä–∞—à–Ω—ã–º, –Ω–æ –≤—ã —Å–º–µ–ª–æ –ø—Ä–æ–±–∏—Ä–∞–ª–∏—Å—å –∏ –Ω–∞–¥–µ—è–ª–∏—Å—å, —á—Ç–æ –º–µ—Å—Ç–Ω—ã–µ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ª–∫–∏ –≤–∞—Å –Ω–µ —É—á—É—è—Ç.",
                "–í—á–µ—Ä–∞ –ª–∏–ª –¥–æ–∂–¥—å, –∏ —Å–µ–≥–æ–¥–Ω—è, –∏, –∫–∞–∂–µ—Ç—Å—è, –æ–Ω –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º. –£–∫—Ä—ã–≤—à–∏—Å—å –≤ –ø–ª–∞—â –ø–∞–ª–∞—Ç–∫—É –≤—ã —Å–∏–¥–µ–ª–∏ –∏ –≥—Ä—É—Å—Ç–∏–ª–∏.",
                "–ü—Ä–æ–π–¥—è –Ω–µ–º–Ω–æ–≥–æ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–¥ —Å–æ–±–∞–∫, –æ–Ω–∏ —Ä–∞—Å—Ç–µ—Ä–∞–∑–ª–∏ –±–µ–¥–Ω–æ–≥–æ —Å–≤–∏–Ω–æ–∫—Ä—ã—Å–∞. –õ—É—á—à–µ –æ–±–æ–π—Ç–∏ –∏—Ö —Å—Ç–æ—Ä–æ–Ω–æ–π."

                ]

text_hit = ["—Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª",
            "–ø—É–Ω—å–∫–Ω—É–ª –ø–æ –Ω–æ—Å—É",
            "–ø–µ—Ä–µ–µ–±–∞–ª –≤ —â–∏",
            "–≤–º–∞–∑–∞–ª",
            "—Ö–∏—Ç—Ä–æ –ø–æ–¥–∫—Ä–∞–ª—Å—è –∏ –≤—Ä–µ–∑–∞–ª",
            "–æ—Ç–±–µ–∂–∞–ª –∏ –∏–∑ —É–∫—Ä—ã—Ç–∏—è –∞—Ç–∞–∫–æ–≤–∞–ª",
            "–Ω–∞–ø–∞–ª —Å–æ —Å–ø–∏–Ω—ã",
            "–µ–±–Ω—É–ª –ø–æ –ø–æ—á–∫–∞–º",
            "–ø–µ—Ä–µ–µ–±–∞–ª –≤–µ—Ä—Ç—É—à–∫–æ–π",
            "—Å—Ö–≤–∞—Ç–∏–ª –∑–∞ —à–µ—é",
            "—Å–¥–µ–ª–∞–ª —Ö–∏—Ç—Ä—ã–π –ø—Ä–∏–µ–º",
            "–ø–æ–ª–æ–∂–∏–ª –Ω–∞ –ª–æ–ø–∞—Ç–∫–∏",
            "–ø–æ—Å–ª–∞–ª –Ω–∞ —Ö—É–π",
            "–≤–∑–æ—Ä–≤–∞–ª –≥—Ä–∞–Ω–∞—Ç—É",
            "–∑–∞–µ—Ö–∞–ª –≤ –≥–æ–ª–æ–≤—É",
            "–∞—Ç–∞–∫–æ–≤–∞–ª –≤ —Å–ø–∏–Ω—É",
            "–ø—Ä–æ–ø–∏—Å–∞–ª –æ–ø–ª–µ—É—Ö—É",
            "–¥–∞–ª –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫",
            "–æ—à–∞—Ä–∞—à–∏–ª –º–µ—Ç–∫–∏–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º",
            "–ø—Ä–æ–ø–∏—Å–∞–ª –∂–µ—Å—Ç–∫–∏–π —É–¥–∞—Ä",
            "–ø–Ω—É–ª –Ω–æ–≥–æ–π –≤ —Å–ø–∏–Ω—É",
            "–æ–≥—Ä–µ–ª –ø–æ –≥–æ–ª–æ–≤–µ",
            "—Å–∞–¥–∞–Ω—É–ª –º–µ—Ç–∫–æ –≤ –∫–æ—Ä–ø—É—Å",
            "–ø—Ä–∏–ø–µ—á–∞—Ç–∞–ª –∫ —Å—Ç–µ–Ω–µ",
            ]

text_hit_mob = ["–≤—ã—Å—Ç—Ä–µ–ª–∏–ª —Ç–≤–∞—Ä–∏ –≤ –º–æ—Ä–¥—É",
                "–æ—Ç—Å—Ç—Ä–µ–ª–∏–ª —â—É–ø–∞–ª—å—Ü–µ",
                "–≤–º–∞–∑–∞–ª –ø–æ –º–æ—Ä–¥–µ",
                "—É–¥–∞—Ä–∏–ª –≤ –∫–æ—Ä–ø—É—Å",
                "–Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –≥–æ–ª–æ–≤—É",
                "—Ä–∞–∑–º–∞–∑–∞–ª –∫–∏—à–∫–∏",
                "–≤ –ø—Ä—ã–∂–∫–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –∏ –ø–æ–ø–∞–ª",
                "–∏–∑ —É–∫—Ä—ã—Ç–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∏–ª",
                "—Ö–∏—Ç—Ä–æ –ø–æ–¥–∫—Ä–∞–ª—Å—è –∏ –ø–µ—Ä–µ–µ–±–∞–ª",
                "–æ—Ç–æ—Ä–≤–∞–ª —Ä—É–∫—É",
                "–ø–æ–π–º–∞–ª –≤ –ª–æ–≤—É—à–∫—É",
                "—É–¥–∞—Ä–∏–ª —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ –º–æ—Ä–¥–µ",
                "–¥–µ–º–æ—Ä–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç–≤–∞—Ä—å",
                "–Ω–∞–∫–∏–Ω—É–ª—Å—è –∏ –≤—ä–µ–±–∞–ª",
                "—Ä–∞–∑–ª–æ–º–∞–ª —á–µ–ª—é—Å—Ç—å —Ç–≤–∞—Ä–∏",
                "–¥–∞–ª –ø–∏–Ω–æ–∫",
                "–±—ã—Å—Ç—Ä–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞–ª",
                "–∑–∞–∫–∏–Ω—É–ª –≥—Ä–∞–Ω–∞—Ç—É",
                "—Å–∫–∏–Ω—É–ª —Å –æ–±—Ä—ã–≤–∞",
                "–∑–∞–µ—Ö–∞–ª –ø–æ –º–æ—Ä–¥–µ",
                "–∞—Ç–∞–∫–æ–≤–∞–ª –¥–µ—Ä–∑–∫–æ",
                ]


text_hero_mis = ["—Å–º–µ—à–Ω–æ —É–ø–∞–ª —Å –æ—Ä—É–∂–∏–µ–º",
                 "–ø–æ–¥—Å–∫–æ–ª—å–∑–Ω—É–ª—Å—è –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ",
                 "—É–ø–∞–ª –≤ —è–º—É",
                 "–≤–ø–∞–ª –≤ —Å—Ç—É–ø–æ—Ä",
                 "–¥—Ä–æ–≥–Ω—É–ª –∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è",
                 "–ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –≤ —É–ø–æ—Ä",
                 "–º–µ—Ç–∫–æ—Å—Ç—å –∫–∞—á–∞–π",
                 "–≥–ª—É–ø–æ –º–∞—Ö–∞–ª —Ä—É–∫–∞–º–∏",
                 "–≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –¥–µ—Ä–µ–≤–æ",
                 "—Å—á–∏—Ç–∞–ª –≤–æ—Ä–æ–Ω",
                 "–ø—Ä–æ—Å—á–∏—Ç–∞–ª—Å—è –∏ –ø—Ä–æ–º–∞–∑–∞–ª",
                 "—Å–º–∞–∑–∞–ª –≤—ã—Å—Ç—Ä–µ–ª",
                 "–æ—Ä—É–∂–∏–µ –¥–∞–ª–æ –æ—Å–µ—á–∫—É",
                 "–Ω–µ —Å–º–æ–≥ —Ä–æ–≤–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –ø—É—Ö—É"]


text_hero_dead = ["—É–º–µ—Ä, —Å—Ç—é–ø–∏–¥ –¥*–±",
                  "–∞—Ö–∞—Ö–∞, –Ω—É–±",
                  "–Ω—É —É–º–µ—Ä –∏ —É–º–µ—Ä",
                  "–Ω—É –Ω–∏—á–µ–≥–æ, –≤–æ—Å–∫—Ä–µ—Å—è—Ç",
                  "–∂–∏—Ç—å –±—É–¥–µ—à—å, –≤ –ª–∞–≥–µ—Ä–µ —Ä–µ–∞–Ω–∏–º–∏—Ä—É—é—Ç",
                  "F",
                  "R.I.P.",
                  "—Å–º–µ—Ä—Ç—å —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ",
                  "–∂–∏–∑–Ω—å —ç—Ç–æ –±–æ–ª—å, —Å–º–µ—Ä—Ç—å —ç—Ç–æ –æ—Ç—Å—É—Ç—Å–≤–∏–µ –±–æ–ª–∏",
                  "–≤ –∑–∞–≥—Ä–æ–±–Ω–æ–º –º–∏—Ä–µ —Ç—ã –≤–µ—á–µ–Ω, –Ω–æ —Ä–∞–Ω–æ –µ—â–µ —Ö–æ—Ä–æ–Ω–∏—Ç—å, –≤ –ª–∞–≥–µ—Ä–µ –ø–æ–¥–Ω–∏–º—É—Ç"]

class Band:
    name = ""
    note = ""
    points = 0
    user_id = 0



class Hero:
    id = ""
    band_id = 0
    band_name = ""
    name = ""
    base_id = 0
    hp = 10
    max_hp = 10  # –∑–¥–æ—Ä–æ–≤—å–µ 1500
    force = 10  # c–∏–ª–∞ 1300
    dexterity = 10  # –ª–æ–≤–∫–æ—Å—Ç—å 1200
    charisma = 10  # —Ö–∞—Ä–∏–∑–º–∞ 1200
    luck = 10  # —É–¥–∞—á–∞ 1200
    accuracy = 10  # –º–µ—Ç–∫–æ—Å—Ç—å 1200
    weapon = None
    armor = None
    drone = None
    materials = 0
    coins = 0
    hungry = 0
    all_km = 0
    km = 0
    kl_pl = 0
    kl_mb = 0
    died = 0
    mob_fight = None
    in_dange = 0
    stock = None
    CNT_LOG = 30
    buffs = None
    km_buff = 0
    km_protect = 0
    moduls = ''
    zone = 0
    km_heal = 0
    dzen = 0
    mobs = None
    perks = '0'*6
    arm_clc = 0
    text_out_boss = ""
    go_boss = 0
    ef_chat = None
    danges = None
    mob_km = 0
    min_log = False
    cnt_miss = 0
    necro_lvl = 1

    def go(self, reverse=False) -> None:
        if reverse:
            if self.km < 1:
                return
            self.km -= 1
        else:
            self.km += 1
        self.all_km += 1

        if self.km_heal > 0:
            self.km_heal -= 1
            self.hp += round(self.max_hp * 0.05)
            if self.hp > self.max_hp*2 and 500 > self.max_hp > 300:
                self.hp = self.max_hp*2
            if self.hp > self.max_hp*1.3 and self.max_hp > 500:
                self.hp = self.max_hp*1.3

        heal_hp = round(self.max_hp * self.get_module(5) / 100)
        if heal_hp:
            self.hp += heal_hp
            if self.hp > self.max_hp:
                self.hp = self.max_hp

        if self.km_protect:
            self.km_protect -= 1

        if self.km_buff:
            self.km_buff -= 1
        else:
            for i in range(0, len(self.buffs)):
                self.buffs[i] = 0

    def get_name(self) -> str:
        return self.name

    def attack_armor(self, use_perk:bool = False) -> int:
        return round(self.calc_armor(use_perk)*1.5)

    def calc_armor(self, use_perk:bool = False) -> int:
        ret = 0
        for i in range(0, 3):
            if self.armor[i]:
                ret += self.armor[i].arm
                if self.armor[i].mod:
                    ret += used_items[self.armor[i].mod]["armor"]
        if use_perk and self.perks[1]!='0':
            ret *= perk_arm_list[int(self.perks[1])-1]
        return round(ret)

    def get_stack(self, index: int) -> int:
        if not self.armor[0]:
            return 0
        if self.armor[0].type_stack == 0:
            return 0

        perks = ["force", "dexterity", "luck", "accuracy"]
        eff = 0
        if self.weapon and self.weapon.mod:
            eff += used_items[self.weapon.mod].get(perks[index], 0)
        for i in range(0, 3):
            if self.armor[i] and self.armor[i].mod:
                eff += used_items[self.armor[i].mod].get(perks[index], 0)

        for i in range(1, 3):
            if self.armor[i] and self.armor[0].type_stack != self.armor[i].type_stack:
                return eff

        return stack_buff[self.armor[0].type_stack - 1][index] + eff

    def get_in_dzen(self) -> int:
        return round(self.dzen) - self.calc_sum(self.get_dzen_lvl()) * 500000

    def calc_sum(self, val: int) -> int:
        return ((val + 1) * val) // 2

    def get_dzen_lvl(self) -> int:
        k = self.dzen // 500000
        return int(1 / 2 * (-1 + pow(1 + 8 * k, 1 / 2)))

    def get_coins_to_dzen(self) -> int:
        return (self.get_dzen_lvl() + 1) * 500000

    def get_module(self, i: int = 0, value: int = 0) -> int:
        k, mod = self.get_act_modul()
        if k != i:
            return 0
        if k in [2, 3, 4]:
            return 100 if value * 0.1 < 100 else round(value * 0.1)
        if k == 1:
            return 25 if value * 0.05 < 25 else round(value * 0.05)

        return mod[0]

    def get_force(self, use_perk: bool = False) -> int:
        force = self.force
        if use_perk and self.perks[0] != '0':
            force = force * perk_force_list[int(self.perks[0]) - 1]

        return force + self.get_stack(0) + self.buffs[0] + self.get_module(1, self.force)

    def get_dexterity(self, use_perk: bool = False) -> int:
        dexterity = self.dexterity
        if use_perk and self.perks[2] != '0':
            dexterity *= perk_dex_list[int(self.perks[2]) - 1]
        return dexterity + self.get_stack(1) + self.buffs[1] + self.get_module(2, self.dexterity)

    def get_luck(self, use_perk: bool = False) -> int:
        luck = self.luck
        if use_perk and self.perks[5] != '0':
            luck *= perk_luck_list[int(self.perks[5]) - 1]
        return luck + self.get_stack(2) + self.buffs[2] + self.get_module(3, self.luck)

    def get_accuracy(self) -> int:
        return self.accuracy + self.get_stack(3) + self.buffs[3] + self.get_module(4, self.accuracy)


    def get_act_modul(self) -> (int, list):
        if self.moduls != '':
            k = len(self.moduls)
            for i in self.moduls:
                if i == '1':
                    return k, all_modules[k]
                k -= 1
        return 0, None


    def get_str_modul(self) -> str:
        k, mod = self.get_act_modul()
        if k:
            return mod[1]
        else:
            return "–Ω–µ—Ç –º–æ–¥—É–ª—è"

    def get_str(self, val: int, i: int) -> str:
        out = str(val)
        stack = self.get_stack(i)
        mod = self.get_module(i + 1, val)

        if stack > 0:
            out += "+" + str(stack)
        elif stack < 0:
            out += str(stack)

        out += "+" + str(mod) if mod else ""

        if self.buffs[i]:
            out += f"({self.buffs[i]})"
        return out


    def add_module(self):
        if self.moduls == '':
            self.moduls = '1'
        else:
            k = len(self.moduls)
            self.moduls = '1' + '0' * k


    def activate_module(self, i: int) -> str:  # 1 2 3 4..
        if self.moduls == '' or i > len(self.moduls):
            return "–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è\n"

        list_mod = list('0' * len(self.moduls))
        list_mod[len(list_mod) - i] = '1'
        self.moduls = ''.join(list_mod)
        return f"{self.get_str_modul()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"

    def ret_cnt_perks(self) -> int:
        out = 0
        for i in self.perks:
            out += int(i)
        return out

    def get_bm(self) -> int:
        return self.max_hp + self.force + self.accuracy + self.luck + self.dexterity + self.charisma

    def free_perks(self) -> int:
        return 1 + self.get_bm()//1250 - self.ret_cnt_perks()

    def inc_perk(self, ind: int) -> str:
        lvls = [250, 550, 850, 1150]
        if int(self.perks[ind]) >= 4:
            return "–Ω–µ–ª—å–∑—è —É–≤–∏–ª–∏—á–∏—Ç—å –ø–µ—Ä–∫!!"
        if ind == 0 and self.force < lvls[int(self.perks[0])]:
            return f"–Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É –¥–æ {lvls[int(self.perks[0])]}"
        if ind == 1 and self.max_hp < lvls[int(self.perks[1])]:
            return f"–Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ö–ø –¥–æ {lvls[int(self.perks[1])]}"
        if ind == 2 and self.dexterity < lvls[int(self.perks[2])]:
            return f"–Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–æ–≤–∫—É –¥–æ {lvls[int(self.perks[2])]}"
        if ind == 3 and self.accuracy < lvls[int(self.perks[3])]:
            return f"–Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –º–µ—Ç–∫–æ—Å—Ç—å –¥–æ {lvls[int(self.perks[3])]}"
        if ind == 4 and self.charisma < lvls[int(self.perks[4])]:
            return f"–Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ö–∞—Ä–∏–∑–º—É –¥–æ {lvls[int(self.perks[4])]}"
        if ind == 5 and self.luck < lvls[int(self.perks[5])]:
            return f"–Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å —É–¥–∞—á—É –¥–æ {lvls[int(self.perks[5])]}"

        lst_perks = list(self.perks)
        lst_perks[ind] = str(int(lst_perks[ind]) + 1)
        self.perks = ''.join(lst_perks)

        return "–ø–µ—Ä–∫ —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω"

    def return_perks(self) -> str:
        text_data = ["—Å–∏–ª–∞—á (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã)",
                     "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (—É—Å–∏–ª-–Ω–∏–µ –±—Ä–æ–Ω–∏)",
                     "–ª–æ–≤–∫–∞—á (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–æ–≤–∫–æ—Å—Ç–∏)",
                     "–º–µ—Ç–∫–∏–π (—Ä–∞–∑–±—Ä–æ—Å —É—Ä–æ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)",
                     "—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥—Ä–æ–Ω–æ–≤)",
                     "—É–¥–∞—á–ª–∏–≤—ã–π (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∞–Ω—Å–∞ —É–¥–∞—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–º –∏ —à–∞–Ω—Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 30% –æ—Ç —Ö–ø)"]
        data = "–≤–∞—à–∏ —É–º–µ–Ω–∏—è:\n"
        cnt_free = self.free_perks()
        if cnt_free > 0:
            data += f"—É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ—á–∫–∏: {cnt_free}\n"
            data += "—Å–ø–∏—Å–æ–∫ –∫—É–¥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–∫–∏:\n"
            data += f"/perk_force  {text_data[0]}\n"
            data += f"/perk_arm  {text_data[1]}\n"
            data += f"/perk_dex  {text_data[2]}\n"
            data += f"/perk_accur  {text_data[3]}\n"
            data += f"/perk_char  {text_data[4]}\n"
            data += f"/perk_luck  {text_data[5]}\n"
        else:
            data += f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ bm –¥–æ –ø–µ—Ä–∫–∞ {1250*self.ret_cnt_perks() - self.get_bm()}\n"

        perks_all = [perk_force_list, perk_arm_list, perk_dex_list, perk_accur_list, perk_drone_list, perk_luck_list]

        for i in range(0, len(perks_all)):
            if int(self.perks[i]):
                data += f"{text_data[i]}  {self.perks[i]}, –∫–æ—ç—Ñ {perks_all[i][int(self.perks[i]) - 1]}\n"

        if data == "–≤–∞—à–∏ —É–º–µ–Ω–∏—è:\n":
            return "—É –≤–∞—Å –Ω–µ—Ç —É–º–µ–Ω–∏–π!"

        return data

    def return_data(self) -> str:
        data = """
        üë§{0} {21}
        ‚îú ü§ü{22}       —É–º–µ–Ω–∏—è /perks
        ‚îú ‚ù§ {1}/{2}  üçó{14}% | ‚öîÔ∏è{15} | üõ° {16} 
        ‚îú üë£{17}   —É–º–µ–Ω—å—à–∞–µ—Ç —Ç–µ–∫—Å—Ç /min_log 
        ‚îú üí™{3} | ü§∏üèΩ‚Äç‚ôÇÔ∏è{4} | üó£{5} 
        ‚îú üëº{6} | üéØ{7}
        ‚îú {19}
        ‚îú {20}
        ‚îú üó°{8}
        ‚îú ü™ñ{9}
        ‚îú üß•{10}
        ‚îú üß§{11}
        ‚îú üì¶{12}
        ‚îî üï≥{13} üë£üë£{18}"""

        dzen = f"üèµ{self.get_dzen_lvl()}" if self.get_dzen_lvl() else ""
        weapon = self.weapon.get_data_hero() if self.weapon else "–Ω–µ—Ç –æ—Ä—É–∂–∏—è"
        armor = self.calc_armor()
        drone = self.drone.get_drone_text_line() if self.drone else "–Ω–µ—Ç –¥—Ä–æ–Ω–∞"
        band_name = self.band_name + "   /band" if self.band_name not in ["–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞–Ω–¥—ã","", None] else "–Ω–µ—Ç –±–∞–Ω–¥—ã"
        return data.format(self.name, round(self.hp), self.max_hp,
                           self.get_str(self.force, 0), self.get_str(self.dexterity, 1), self.charisma,
                           self.get_str(self.luck, 2), self.get_str(self.accuracy, 3), weapon,
                           self.arm_str(self.armor[0]),
                           self.arm_str(self.armor[1]), self.arm_str(self.armor[2]), self.materials,
                           round(self.coins), self.hungry, self.calc_attack(),
                           armor, self.km, self.all_km, self.get_str_modul(), drone, dzen, band_name)


    def arm_str(self, arm: object) -> str:
        return arm.get_data_hero() if arm else "–Ω–µ—Ç –±—Ä–æ–Ω–∏"

    def calc_attack(self, use_perk: bool=False) -> int:
        if self.weapon:
            dmg = self.weapon.dmg
            force = self.get_force(use_perk)
            if self.weapon.mod:
                dmg += used_items[self.weapon.mod]["damage"]
            if self.force < 50:
                return round(dmg + force)
            else:
                if force > 1800:
                    return round(50 + dmg * (pow(1.03, 1800 / 50)* pow(1.015, (force - 1800) / 50)))
                else:
                    return round(50 + dmg * pow(1.03, force / 50))
        else:
            return 1

    def get_hit_armor(self) -> None:
        for i in range(0, 3):
            if self.armor[i]:
                if self.armor[i].life <= 0:
                    self.armor[i] = None
                else:
                    self.armor[i].life -= 1

    def get_attack(self, use_perks: bool = False, test: bool = False) -> int:
        if self.weapon and self.weapon.life > 0:
            if not test:
                self.weapon.life -= 0.5
            if use_perks and self.perks[3] != '0':
                if randint(0, 4) == 3:
                    return round(self.calc_attack(False) * random.uniform(0.85, 1.15)*perk_accur_list[int(self.perks[3])-1])
                else:
                    return round(self.calc_attack(use_perks) * random.uniform(0.85, 1.15))
            else:
                return round(self.calc_attack(use_perks) * random.uniform(0.85, 1.15))
        else:
            self.weapon = None
            return 1

    def get_miss(self, dex: int) -> bool:
        if self.cnt_miss > 0:
            self.cnt_miss = 0
            return False
        acc = self.get_accuracy()
        k = 4 if dex/acc >= 4 else dex/acc
        r = randint(0, 500)
        if k <= 0.5 and r < 100 * k:
            self.cnt_miss += 1
        #print(f'{r} < {10 * k} hero {self.name}')
        return r < 100 * k

    def calc_cost(self, val: int) -> int:
        out = 13 * val - 3 * self.charisma
        return 10 if out < 10 else round(13 * val - 3 * self.charisma)

    def sel_mob_from_zone(self, mobs_zone: list) -> None:
        r = randint(0, 100)
        k = len(mobs_zone) - 1
        while k > 0 and r % k != 0:
            k -= 1
        self.mob_fight = copy.copy(mobs_zone[k])

    def select_mob(self) -> None:
        if self.zone >= 3:
            r = 200
        else:
            r = round(200 - self.km * 1.3) if self.km < 80 else 100

        if self.zone == 7:
            if randint(0, 400) < r or self.mob_km > 3:
                self.mob_km = 0
                self.mob_fight = copy.copy(list_mk_zone[0])
                self.mob_fight.name = f"üíÄ–ù–µ–∫—Ä–æ–Ω –≤–æ–∏–Ω üåü(—É—Ä–æ–≤–µ–Ω—å {round((self.necro_lvl - 1) / 0.2) + 1})"
                self.mob_fight.attack = 1000 * self.necro_lvl
                self.mob_fight.luck = self.luck / 1.5 * self.necro_lvl
                self.mob_fight.dexterity = self.dexterity / 1.5 * self.necro_lvl
                self.mob_fight.accuracy = self.accuracy
                self.mob_fight.hp = round(1500 * self.necro_lvl)
                self.mob_fight.coins = 200 * self.necro_lvl
                self.necro_lvl += 0.2

            else:
                self.mob_km += 1
            return

        if randint(0, 400) < r or self.mob_km > 3:
            coef = 2
            self.mob_km = 0
            if self.zone == 3:
                self.sel_mob_from_zone(list_mob_clown_zone)
            elif self.zone == 4:
                #self.sel_mob_from_zone(list_mob_painkiller_zone)
                i = randint(0, len(list_mob_painkiller_zone) - 1)
                self.mob_fight = copy.copy(list_mob_painkiller_zone[i])
            elif self.zone == 5:
                k = (self.km - 31)//4
                i = randint(3*k, 3*k + 2)
                self.mob_fight = copy.copy(list_mk_zone[i])
            elif self.zone == 6:
                k = (self.km - 66)//4
                i = randint(3*k, 3*k + 2)
                self.mob_fight = copy.copy(list_mob_dino_zone[i])
            else:
                k = self.km // 5
                if k >= len(list_mobs):
                    k = len(list_mobs) - 1
                if self.zone == 2:
                    if random.randint(0, 1):
                        list_m = list_mobs[k+5]
                    else:
                        list_m = list_mobs[k]
                        coef = 7

                else:
                    list_m = list_mobs[k]
                i = randint(0, len(list_m) - 1)
                self.mob_fight = copy.copy(list_m[i])

            if 3 > self.zone > 0:

                if self.zone == 1:
                    if ")" in self.mob_fight.get_name():
                        self.mob_fight.name = self.mob_fight.get_name().replace(")", "‚ò¢Ô∏è)")
                    else:
                        self.mob_fight.name = self.mob_fight.get_name() + "‚ò¢"
                elif self.zone == 2:
                    self.mob_fight.coins *= 1.5
                    if ")" in self.mob_fight.get_name():
                        self.mob_fight.name = self.mob_fight.get_name().replace(")", "‚ò†)")
                    else:
                        self.mob_fight.name = self.mob_fight.get_name() + "‚ò†"

                self.mob_fight.hp *= coef
                self.mob_fight.attack *= coef
                self.mob_fight.dexterity *= coef
                self.mob_fight.luck *= coef
                self.mob_fight.accuracy *= coef
                if coef == 2:
                    self.mob_fight.coins *= 2
                else:
                    self.mob_fight.coins *= 3

            self.mob_fight.hp = round(self.mob_fight.hp * random.uniform(0.85, 1.15))
            if not self.in_dange and randint(0, 20) == 5:
                self.mob_fight.enfect = True
                self.mob_fight.name += " ü¶†ü¶†ü¶†"
        else:
            self.mob_km += 1

    def learn_data(self) -> str:
        out = f"üï≥–ö—Ä—ã—à–∫–∏: {round(self.coins)}\n"
        out += f"üí™–°–∏–ª–∞({self.force}): üï≥{self.calc_cost(self.force)}\n"
        out += f"üéØ–ú–µ—Ç–∫–æ—Å—Ç—å({self.accuracy}): üï≥{self.calc_cost(self.accuracy)}\n"
        out += f"ü§∏üèΩ‚Äç‚ôÇÔ∏è–õ–æ–≤–∫–æ—Å—Ç—å({self.dexterity}): üï≥{self.calc_cost(self.dexterity)}\n"
        out += f"‚ù§Ô∏è–ñ–∏–≤—É—á–µ—Å—Ç—å({self.max_hp}): üï≥{self.calc_cost(self.max_hp)}\n"
        out += f"üó£–•–∞—Ä–∏–∑–º–∞({self.charisma}): üï≥{10 * self.charisma}\n"
        out += f"üëº–£–¥–∞—á–∞({self.luck}): üï≥{self.calc_cost(self.luck)}\n\n"
        out += "–í—ã–±–∏—Ä–∞–π –∂–µ–ª–∞–µ–º—ã–π –Ω–∞–≤—ã–∫:"
        return out

    def inc_hp(self) -> bool:
        return True if self.max_hp < 1500 + self.get_dzen_lvl()*50 else False

    def inc_force(self) -> bool:
        return True if self.force < 1300 + self.get_dzen_lvl() * 50 else False

    def inc_dex(self) -> bool:
        return True if self.dexterity < 1200 + self.get_dzen_lvl() * 50 else False

    def inc_char(self) -> bool:
        return True if self.charisma < 1200 + self.get_dzen_lvl() * 50 else False

    def inc_acc(self) -> bool:
        return True if self.accuracy < 1200 + self.get_dzen_lvl() * 50 else False

    def inc_luck(self) -> bool:
        return True if self.luck < 1200 + self.get_dzen_lvl() * 50 else False

    def is_first_hit(self, luck: int, use_perk: bool = False) -> int:
        return randint(0, 1000) - 500 < self.get_luck(use_perk) - luck

    def make_header(self) -> str:
        buffed = "*–±–∞—Ñ—Ñ*" if self.km_buff > 0 else ""
        zones_mark =["", "‚ò¢", "‚ò†Ô∏è", "ü§°Ô∏è", "üî™", "üë∫", "üêä", "üíÄ"]
        zoned = zones_mark[self.zone]
        enfect = ""
        protect = ""
        if self.km_protect > 1:
            protect = "üíâ"
        for buff in self.buffs:
            if buff < 0:
                enfect = "ü¶†"
        return f"{protect}{zoned}‚ù§{enfect}Ô∏è {round(self.hp)}\{self.max_hp} üçó{self.hungry}% {buffed} üë£{self.km} \n"

    def attack_boss_1rnd(self, mob: Mob, min_log: bool = False, test: bool = False) -> str:
        out = ""
        armor = self.attack_armor()
        is_first = True
        if randint(0, 1) == 1:
            is_first = False

        if is_first:
            if self.get_miss(mob.dexterity):
                if not test:
                    out += f"‚ù§Ô∏è {round(self.hp)} {self.get_name()} ‚û∞ {self.log_hit(text_hero_mis, min_log)}\n"
            else:
                drone_hit = ""
                drone_dmg = 0
                if self.drone:
                    drone_dmg, drone_hit = self.drone.get_attack(mob, self.perks)
                att = self.get_attack(test=test)
                if self.calc_attack() > 250:
                    att = round(250 * random.uniform(0.85, 1.15))

                if not test:
                    out += f"‚ù§Ô∏è {round(self.hp)} {self.get_name()} {self.log_hit(text_hit_mob, min_log)} üí•{round(att)}\n"
                    out += drone_hit
                mob.hp -= att + drone_dmg
            if mob.hp <= 0:
                if not test:
                    out += f"{mob.get_name()} –ø–æ–≤–µ—Ä–∂–µ–Ω\n"
                return out
        else:
            if mob.get_miss(self.get_dexterity()):
                if not test:
                    out += f"‚ù§Ô∏è {round(mob.hp)} üåÄ{mob.get_name()} {self.log_hit(text_mob_mis, min_log)}\n"
            else:
                if armor > 100:
                    armor = 100
                if self.max_hp > 400:
                    armor = 0
                dmg = mob.get_attack() - armor

                dmg = dmg if dmg > 0 else 1
                drone_hit = ""
                if self.drone:
                    drone_hit = self.drone.get_hit(dmg, self.perks, test=test)
                    if self.drone.hp <= 0:
                       self.drone = None
                if drone_hit == "":
                    if not test:
                        out += f"‚ù§Ô∏è {round(mob.hp)} {mob.get_name()} {mob.log_hit_mob(min_log)} {self.get_name()} üíî-{round(dmg)}\n"
                    self.hp -= dmg
                    if not test:
                        self.get_hit_armor()
                else:
                    out += drone_hit
        return out

    @staticmethod
    def attack_boss(list_heroes: list, boss: Mob, test: bool = False, boss_id: int = 0, min_log: bool = False) -> None:
        out = ""
        boss_round = 0
        cnt_dead = 0
        while boss.hp > 0:
            if boss_round > 100:
                break
            boss_round += 1
            if not test:
                out += f"\n—Ä–∞—É–Ω–¥ {boss_round}\n‚ù§Ô∏è {boss.hp} –±–æ—Å—Å {boss.name}\n"
            for i in range(0, len(list_heroes)):
                if list_heroes[i].go_boss == boss_id:
                    out += list_heroes[i].attack_boss_1rnd(boss, test, min_log)
                    if boss.hp <= 0:
                        break
                    if list_heroes[i].hp < 0:
                        out_new = out
                        out_new += f"{list_heroes[i].get_name()} {list_heroes[i].log_hit(text_hero_dead)}\n"
                        out_new += f"–ø–æ—Ç–µ—Ä—è–Ω–æ: üï≥ {round(list_heroes[i].coins * 0.5)}\n"
                        list_heroes[i].coins *= 0.5
                        list_heroes[i].text_out_boss = out_new
                        list_heroes[i].go_boss = 0
                        cnt_dead += 1
                        out += f"üíÄ{list_heroes[i].name}\n"

            if boss.hp <= 0:
                #out += f"–±–æ—Å—Å –ø–æ–≤–µ—Ä–∂–µ–Ω –∏–≥—Ä–æ–∫–æ–º {list_heroes[i].name}\n"
                coins = round(boss.calc_mob_coins(boss.km)) * 3
                mats = round(boss.calc_mob_mat(boss.km)) * 3
                for j in range(0, len(list_heroes)):
                    if list_heroes[j].go_boss == boss_id:
                        out_new = out
                        list_heroes[j].coins += coins
                        list_heroes[j].materials += mats
                        out_new += f"–ø–æ–ª—É—á–µ–Ω–æ üï≥ {coins} üì¶ {mats}\n"
                        rkey, ritem = get_random_item(True)
                        out_new += f"–≤–∞–º –≤—ã–ø–∞–ª–æ:\n {ritem['name']} /ustf_{rkey}\n"
                        list_heroes[j].stock.add_stuff(rkey)
                        list_heroes[j].text_out_boss = out_new
                        list_heroes[j].go_boss = 0
                break

            if cnt_dead == len(list_heroes):
                break

    def attack_mob_pvp(self, mob: Mob, min_log: bool = False) -> str:
        out = f"‚ù§Ô∏è {round(self.hp)} {self.get_name()} vs {mob.get_name()} ‚ù§{round(mob.hp)}\n\n"
        armor = self.calc_armor()
        hp_mob = mob.hp
        cnt_log_msg = 0
        is_first = True
        if mob.is_first_hit(luck=self.get_luck()):
            is_first = False

        while round(self.hp) > 0:
            if is_first:
                is_first = False
                if self.get_miss(mob.dexterity):
                    if cnt_log_msg < self.CNT_LOG:
                        cnt_log_msg += 1
                        out += f"‚ù§Ô∏è {round(self.hp)} {self.get_name()} ‚û∞ {self.log_hit(text_hero_mis, min_log)}\n"
                else:
                    drone_hit = ""
                    drone_dmg = 0
                    if self.drone:
                        drone_dmg, drone_hit = self.drone.get_attack(mob, self.perks)
                    att = self.get_attack()
                    if cnt_log_msg < self.CNT_LOG:
                        cnt_log_msg += 1
                        out += f"‚ù§Ô∏è {round(self.hp)} {self.get_name()} {self.log_hit(text_hit_mob, min_log)} üí•{round(att)}\n"
                        out += drone_hit
                    hp_mob -= att + drone_dmg
                    if hp_mob <= 0:
                        if cnt_log_msg > self.CNT_LOG:
                            out += " ......... ....... ....\n"
                        self.enfect_hero(mob)
                        out += f"{mob.get_name()} –ø–æ–≤–µ—Ä–∂–µ–Ω\n"
                        return out
            else:
                is_first = True
                if mob.get_miss(self.get_dexterity()):
                    if cnt_log_msg < self.CNT_LOG:
                        cnt_log_msg += 1
                        out += f"üåÄ{mob.get_name()} {self.log_hit(text_mob_mis, min_log)}\n"
                else:
                    dmg = mob.get_attack() - armor
                    dmg = dmg if dmg > 0 else 1
                    drone_hit = ""
                    if self.drone:
                        drone_hit = self.drone.get_hit(dmg, self.perks)
                        if self.drone.hp <= 0:
                            self.drone = None
                    if drone_hit == "":
                        if cnt_log_msg < self.CNT_LOG:
                            cnt_log_msg += 1
                            out += f"{mob.get_name()} {mob.log_hit_mob(min_log)} {self.get_name()} üíî-{round(dmg)}\n"
                        self.hp -= dmg
                        self.get_hit_armor()
                    else:
                        out += drone_hit

        if cnt_log_msg > self.CNT_LOG:
            out += " ......... ....... ....\n"

        if round(self.hp) <= 0:
            out += f"{self.get_name()} {self.log_hit(text_hero_dead)}\n"
            #self.died_hero()
        self.km = 0
        return out

    def enfect_hero(self, mob: Mob) -> None:
        if mob.enfect and not self.km_protect:
            i = randint(0, 3)
            if i == 0:
                self.buffs[i] = -self.force // 2
            elif i == 1:
                self.buffs[i] = -self.dexterity // 2
            elif i == 2:
                self.buffs[i] = -self.luck // 2
            elif i == 3:
                self.buffs[i] = -self.accuracy // 2
            self.km_buff = randint(15, 25)

    def attack_mob(self, mob: Mob, is_dange=False, min_log: bool = False) -> str:
        out = f"–°—Ä–∞–∂–µ–Ω–∏–µ —Å {mob.get_name()} ‚ù§{mob.hp}\n\n"
        armor = self.calc_armor()
        hp_mob = mob.hp
        cnt_log_msg = 0
        is_first = True
        if mob.is_first_hit(luck=self.get_luck()): #–ø–µ—Ä–≤—ã–π –ª–∏ —É–¥–∞—Ä –º–æ–±–∞
            is_first = False

        miss_text = ""
        while round(self.hp) > 0:
            if is_first:
                is_first = False
                if self.get_miss(mob.dexterity): #–Ω–∞—á–∏–Ω–∞–µ–º –±–∏—Ç—å
                    if cnt_log_msg < self.CNT_LOG:
                        cnt_log_msg += 1
                        miss_text = f"üë§–¢—ã ‚û∞ {self.log_hit(text_hero_mis, min_log)}\n"
                else:
                    out += miss_text
                    miss_text = ""
                    drone_hit = ""
                    drone_dmg = 0
                    if self.drone:
                        drone_dmg, drone_hit = self.drone.get_attack(mob, self.perks)
                    att = self.get_attack()
                    regen_mod = self.get_module(7)
                    regen_str = ""
                    if regen_mod and not is_dange:
                        if att < hp_mob:
                            self.hp += att*regen_mod/100
                            regen_str = f"‚ù§+{round(att*regen_mod/100)}"
                        else:
                            self.hp += hp_mob * regen_mod / 100
                            regen_str = f"‚ù§+{round(hp_mob*regen_mod/100)}"

                    if cnt_log_msg < self.CNT_LOG:
                        cnt_log_msg += 1
                        out += f"‚ù§ {round(self.hp)} üë§–¢—ã {self.log_hit(text_hit_mob, min_log)} üí•{round(att)} {regen_str}\n"
                        out += drone_hit
                    hp_mob -= att + drone_dmg
                    if hp_mob <= 0:
                        if cnt_log_msg >= self.CNT_LOG:
                            out += " ......... ....... ....\n"
                        out += f"{mob.get_name()} –ø–æ–≤–µ—Ä–∂–µ–Ω\n"
                        bonus_mod = self.get_module(6)
                        coins = round(mob.calc_mob_coins(self.km) * (1 + bonus_mod / 100))
                        mats = round(mob.calc_mob_mat(self.km) * (1 + bonus_mod / 100))
                        if not is_dange:
                            self.enfect_hero(mob)
                            self.coins += coins
                            self.materials += mats
                            bonus_str = f"+{bonus_mod}%" if bonus_mod else ""
                            out += f"–ø–æ–ª—É—á–µ–Ω–æ üï≥ {coins}{bonus_str} üì¶ {mats}{bonus_str}\n"
                            out_stuff = ""
                            chanse = 0
                            if not self.zone:
                                chanse = randint(0, 20)
                            else:
                                chanse = randint(0, 7)
                            if chanse == 5:
                                rkey, ritem = get_random_item()
                                out_stuff += f"\n{ritem['name']} /ustf_{rkey}"
                                self.stock.add_stuff(rkey)

                            if 4 > self.zone >= 2 or (self.km >= 30 and self.zone == 1):
                                chanse = randint(0, 7)
                                if chanse == 5:
                                    rkey, ritem = get_random_item(True)
                                    out_stuff += f"\n {ritem['name']} /ustf_{rkey}"
                                    self.stock.add_stuff(rkey)

                            if self.km >= 75:
                                if randint(0, 500) == 333:
                                    self.stock.add_stuff(403)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[403]['name']}"

                            if 4 <= self.zone:
                                chanse = randint(0, 4)
                                if chanse == 2:
                                    rkey, ritem = get_random_item(True)
                                    out_stuff += f"\n {ritem['name']} /ustf_{rkey}"
                                    self.stock.add_stuff(rkey)

                            if out_stuff!= "":
                                out += "–≤–∞–º –≤—ã–ø–∞–ª–æ:" + out_stuff +"\n"
                            if randint(0, 20) == 1 and not ("–¢–µ–Ω–µ–≤–æ–π –Ω–µ–∫—Ä–æ–º–æ–Ω—Å—Ç—Ä" in mob.get_name()):

                                if not self.mobs:
                                    self.mobs = []
                                if len(self.mobs) < 2:
                                    out += f"–º–æ–± {mob.get_name()} –≤–∑—è—Ç –≤ –∫–æ–º–∞–Ω–¥—É!\n"
                                    self.mobs.append(mob)

                            if self.zone in [1, 2, 3] and not self.drone:
                                if randint(0, 500) == 455:
                                    out += f"üõ∞{all_drones[1].get_name()} –≤–æ–∑–ª–µ –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–≥–æ –º–æ–±–∞ –ª–µ–∂–∞–ª –¥—Ä–æ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                                    self.drone = copy.copy(all_drones[1])
                            if self.zone == 2: #death
                                if randint(0, 400) == 199:
                                    self.stock.add_stuff(400)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[400]['name']}"
                                if randint(0, 500) == 266:
                                    type = randint(0, 2)
                                    self.stock.add_item(armor_all[type][13])
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {armor_all[type][13].get_name()}"
                                if randint(0, 500) == 266:
                                    self.stock.add_item(weapons_all[21])
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {weapons_all[21].get_name()}"
                            if self.zone == 3: #clown
                                if randint(0, 400) == 222:
                                    type = randint(0, 2)
                                    self.stock.add_item(armor_all[type][12])
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {armor_all[type][12].get_name()}"
                                if randint(0, 400) == 277:
                                    self.stock.add_item(weapons_all[22])
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {weapons_all[22].get_name()}"
                            if self.zone == 4: #pk
                                if randint(0, 400) == 199:
                                    self.stock.add_stuff(401)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[401]['name']}"
                                if randint(0, 400) == 333:
                                    self.stock.add_stuff(402)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[402]['name']}"
                                if randint(0, 800) == 222:
                                    code = random.choice([405, 406])
                                    self.stock.add_stuff(code)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[code]['name']}"
                                if randint(0, 500) == 455 and not self.drone:
                                    out += f"üõ∞{all_drones[2].get_name()} –≤–æ–∑–ª–µ –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–≥–æ –º–æ–±–∞ –ª–µ–∂–∞–ª –¥—Ä–æ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                                    self.drone = copy.copy(all_drones[2])
                            if self.zone == 5: #arena
                                if randint(0, 400) == 333:
                                    self.stock.add_stuff(500)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[500]['name']}"
                                if randint(0, 700) == 333:
                                    self.stock.add_stuff(404)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[404]['name']}"
                                if not self.drone:
                                    if randint(0, 400) == 222:
                                        out += f"üõ∞{all_drones[3].get_name()} –≤–æ–∑–ª–µ –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–≥–æ –º–æ–±–∞ –ª–µ–∂–∞–ª –¥—Ä–æ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                                        self.drone = copy.copy(all_drones[3])
                                if randint(0, 800) == 222:
                                    code = random.choice([406, 407])
                                    self.stock.add_stuff(code)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[code]['name']}"
                                if "–®–∞–æ" in mob.name:
                                    if randint(0, 20) == 10:
                                        type = randint(0, 2)
                                        self.stock.add_item(armor_all[type][14])
                                        out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {armor_all[type][14].get_name()}"
                                    elif randint(0, 10) == 5:
                                        self.stock.add_item(weapons_all[23])
                                        out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {weapons_all[23].get_name()}"
                            if self.zone == 7: #–Ω–µ–∫—Ä–æ
                                if randint(0, 400) == 344:
                                    self.stock.add_stuff(500)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[500]['name']}"
                                if randint(0, 700) == 333:
                                    self.stock.add_stuff(404)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[404]['name']}"
                                if not self.drone:
                                    if randint(0, 400) == 222:
                                        out += f"üõ∞{all_drones[5].get_name()} –≤–æ–∑–ª–µ –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–≥–æ –º–æ–±–∞ –ª–µ–∂–∞–ª –¥—Ä–æ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                                        self.drone = copy.copy(all_drones[5])
                                if randint(0, 600) == 222:
                                    code = random.choice([406, 407])
                                    self.stock.add_stuff(code)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[code]['name']}"

                            if self.zone == 6: #dino
                                if randint(0, 400) == 344:
                                    self.stock.add_stuff(500)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[500]['name']}"
                                if randint(0, 700) == 333:
                                    self.stock.add_stuff(404)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[404]['name']}"
                                if not self.drone:
                                    if randint(0, 400) == 222:
                                        out += f"üõ∞{all_drones[4].get_name()} –≤–æ–∑–ª–µ –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–≥–æ –º–æ–±–∞ –ª–µ–∂–∞–ª –¥—Ä–æ–Ω, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                                        self.drone = copy.copy(all_drones[4])
                                if randint(0, 700) == 222:
                                    code = random.choice([406, 407])
                                    self.stock.add_stuff(code)
                                    out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {used_items[code]['name']}"
                                if "–¢–∏—Ä–∞–Ω–Ω" in mob.name:
                                    if randint(0, 30) == 10:
                                        type = randint(0, 2)
                                        self.stock.add_item(armor_all[type][16])
                                        out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {armor_all[type][16].get_name()}"
                                    elif randint(0, 20) == 5:
                                        self.stock.add_item(weapons_all[25])
                                        out += f"–í–æ–π –≤–æ–π –≤–∞–º –≤—ã–ø–∞–ª–æ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ {weapons_all[25].get_name()}"


                        return out
            else:
                is_first = True
                if mob.get_miss(self.get_dexterity()):
                    if cnt_log_msg < self.CNT_LOG:
                        miss_text = f"üåÄ{self.log_hit(text_mob_mis, min_log)}\n"
                else:
                    if cnt_log_msg < self.CNT_LOG:
                        cnt_log_msg += 1
                        out += miss_text
                    miss_text = ""
                    dmg = mob.get_attack() - armor
                    dmg = dmg if dmg > 0 else 1
                    drone_hit = ""
                    if self.drone:
                        drone_hit = self.drone.get_hit(dmg, self.perks)
                        if self.drone.hp <= 0:
                            self.drone = None
                    if drone_hit == "":
                        self.hp -= dmg
                        if cnt_log_msg < self.CNT_LOG:
                            cnt_log_msg += 1
                            out += f"{mob.log_hit_mob(min_log)} üíî-{round(dmg)}\n"
                        self.get_hit_armor()
                    else:
                        if cnt_log_msg < self.CNT_LOG:
                            cnt_log_msg += 1
                            out += drone_hit

        if cnt_log_msg >= self.CNT_LOG:
            out += " ......... ....... ....\n"

        if round(self.hp) <= 0:
            out += self.died_hero_mob()

        self.km = 0
        return out

    def died_hero_mob(self) -> None:
        out = f"{self.log_hit(text_hero_dead)}\n"
        if self.zone >= 1:
            out += f"–ø–æ—Ç–µ—Ä—è–Ω–æ: üï≥ {round(self.coins * 0.5)}"
            self.coins *= 0.5
        else:
            if self.km >= 30:
                out += f"–ø–æ—Ç–µ—Ä—è–Ω–æ: üï≥ {round(self.coins * 0.25)}"
                self.coins = round(self.coins * 0.75)
        self.died_hero()
        return out

    def died_hero(self) -> None:
        self.km = 0
        self.died += 1
        self.hp = 1
        self.zone = 0
        self.mob_fight = None
        self.danges = []
        self.necro_lvl = 1

    def log_hit(self, texts_list: list, min_log: bool=False) -> str:
        if min_log:
            return ""
        return random.choice(texts_list)

    def attack_pvp_wmobs(self, hero: object, min_log: bool = False) -> str:
        out = ""
        if self.is_first_hit(luck=hero.get_luck(True), use_perk=True):
            out += self.attack_player_with_mobs(hero, min_log)
        else:
            out += hero.attack_player_with_mobs(self, min_log)

        if hero.km !=0 and self.km != 0:
            out += self.attack_player(hero)

        return out

    def attack_player_with_mobs(self, hero: object, min_log: bool = False) -> str:
        out = ""
        j = i = 0
        if self.mobs and hero.mobs:
            while i < len(self.mobs):
                out += self.mobs[i].attack_mob(hero.mobs[j], min_log)
                if hero.mobs[j].hp <= 0:
                    j += 1
                    if j >= len(hero.mobs):
                        break
                else:
                    i += 1

        while self.mobs and i < len(self.mobs) and hero.hp >= 0 and hero.km > 0:
            out += hero.attack_mob_pvp(self.mobs[i], min_log)
            i += 1
        while hero.mobs and j < len(hero.mobs) and self.hp >= 0 and self.km > 0:
            out += self.attack_mob_pvp(hero.mobs[j], min_log)
            j += 1

        self.mobs = None
        hero.mobs = None
        return out

    @staticmethod
    def fight_heroes(hero1: object, hero2: object, cnt_log_msg: int, min_log: bool = False) -> str:
        out = ""
        if hero1.get_miss(hero2.get_dexterity(True)):
            if cnt_log_msg < hero1.CNT_LOG:
                out += f"‚ù§Ô∏è {round(hero1.hp)} {hero1.get_name()} üåÄ{hero1.log_hit(text_hero_mis, min_log)}\n"
        else:
            drone_hit = ""
            drone_hit_block = ""
            drone_dmg = 0
            if hero1.drone:
                drone_dmg, drone_hit = hero1.drone.get_attack(hero2, hero1.perks)
            if drone_hit != "":
                out += drone_hit
                hero2.hp -= drone_dmg
                if hero2.hp <= 0:
                    out += f"{hero2.get_name()} –ø–æ–≤–µ—Ä–∂–µ–Ω\n"
                    return out

            attack = hero1.get_attack(True)
            dmg = attack - hero2.arm_clc
            dmg = 1 if dmg < 0 else dmg
            if randint(0, 10) == 5:
                dmg = attack*0.25
            if hero2.drone:
                drone_hit_block = hero2.drone.get_hit(dmg, hero2.perks)
                if hero2.drone.hp <= 0:
                    hero2.drone = None

            if drone_hit_block == "":
                if cnt_log_msg < hero1.CNT_LOG:
                    out += f"‚ù§Ô∏è {round(hero1.hp)} {hero1.get_name()} {hero1.log_hit(text_hit, min_log)} üí•{round(dmg)}\n"

                hero2.hp -= dmg
                hero2.get_hit_armor()
                if hero2.perks[5] != '0' and hero2.hp < hero2.max_hp:
                    coef = perk_luck_list[int(hero2.perks[5]) - 1] #2
                    if randint(0, 100) < coef*20 and hero2.max_hp > hero2.hp > 0:
                        hp_cur = hero2.hp
                        hero2.hp += hero2.max_hp*0.5
                        if hero2.hp > hero2.max_hp:
                            hero2.hp = hero2.max_hp
                        out += f"‚ù§Ô∏è {round(hero2.hp)} {hero2.get_name()} —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–≤—ã–∫ —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫ ‚ù§Ô∏è +{round(hero2.hp - hp_cur)} \n"

                if hero2.hp <= 0:
                    if cnt_log_msg > hero1.CNT_LOG:
                        out += " ......... ....... ....\n"
                    out += f"{hero2.get_name()} –ø–æ–≤–µ—Ä–∂–µ–Ω\n"
                    return out
            else:
                out += drone_hit_block
        return out

    def attack_player(self, hero: object, min_log: bool = False) -> str:
        out = "\n"
        self.arm_clc = self.attack_armor(True)
        hero.arm_clc = hero.attack_armor(True)
        cnt_log_msg = 0
        is_first = False
        if self.is_first_hit(luck=hero.get_luck(True), use_perk=True):
            is_first = True

        while round(self.hp) > 0:
            cnt_log_msg += 1
            if is_first:
                is_first = False
                out += Hero.fight_heroes(self, hero, cnt_log_msg, min_log)
            else:
                is_first = True
                out += Hero.fight_heroes(hero, self, cnt_log_msg, min_log)
            if hero.hp <= 0 or self.hp <= 0:
                break

        if cnt_log_msg > self.CNT_LOG:
            out += " ......... ....... ....\n"

        if round(self.hp) <= 0:
            out += f"{self.get_name()} {self.log_hit(text_hero_dead)}\n"
            hero.kl_pl += 1
        return out

    def from_db(self, hero_db: HeroDB) -> None:
        self.base_id = hero_db.id
        self.name = hero_db.name
        self.id = hero_db.user_id
        self.band_id = hero_db.band_id
        self.band_name = hero_db.band_name
        self.hp = hero_db.hp
        self.max_hp = hero_db.max_hp
        self.force = hero_db.force
        self.dexterity = hero_db.dexterity
        self.charisma = hero_db.charisma
        self.luck = hero_db.luck
        self.accuracy = hero_db.accuracy
        self.materials = hero_db.materials
        self.coins = hero_db.coins
        self.hungry = hero_db.hungry
        self.km = hero_db.km
        self.all_km = hero_db.all_km
        self.moduls = hero_db.moduls
        self.zone = hero_db.zone
        self.dzen = hero_db.dzen
        self.perks = hero_db.perks

    def to_db(self) -> HeroDB:
        return HeroDB(name=self.name, user_id=self.id,
                      hp=self.hp, max_hp=self.max_hp,
                      force=self.force, dexterity=self.dexterity,
                      charisma=self.charisma, luck=self.luck,
                      accuracy=self.accuracy, materials=self.materials,
                      coins=self.coins, hungry=self.hungry, km=self.km, mob="",
                      all_km=self.all_km, moduls=self.moduls, zone=self.zone, dzen=self.dzen,
                      band_id=self.band_id, band_name=self.band_name, perks=self.perks)
