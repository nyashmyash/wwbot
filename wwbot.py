#!/usr/bin/python
# -*- coding: utf-8 -*-

import logging
import random
import copy
from db.db_process import *
from hero import *
from db.base import *
from stock import Stock, used_items, get_random_food
from armor import Armor, armor_all
from weapon import Weapon, weapons_all
from mob import *
from menu import *
from drone import *
from collections import OrderedDict
from sethook import token
#from telegram.constants import ParseMode

from multiprocessing import Queue

queue_global = Queue()

all_data = {}

from telegram import __version__ as TG_VER

try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)  # type: ignore[assignment]

if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(
        f"This example is not compatible with your current PTB version {TG_VER}. To view the "
        f"{TG_VER} version of this example, "
        f"visit https://docs.python-telegram-bot.org/en/v{TG_VER}/examples.html"
    )
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, \
    MessageHandler, filters

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# async def fixed_replay(update, text, reply_markup) -> None:
#     await update.message.reply_text(text, reply_markup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    await update.message.reply_html(
        rf"Hi {user.mention_html()}!"
    )


async def get_hero(update):
    rslt = all_data.get(update.effective_user.id, None)
    if not rslt:
        db_hero_fetch = await get_hero_db(async_session, str(update.effective_user.id))

        hero = Hero()
        stock = Stock()
        hero.stock = stock
        hero.buffs = [0, 0, 0, 0]
        hero.danges = []
        stock.equip = OrderedDict()
        if not len(db_hero_fetch):

            hero.id = str(update.effective_user.id)
            hero.band_id = 0
            hero.name = update.effective_chat.first_name
            hero.weapon = copy.copy(weapons_all[0])
            hero.weapon.use = 1
            hero.armor = []
            hero.armor.append(copy.copy(armor_all[0][0]))
            hero.armor.append(copy.copy(armor_all[1][0]))
            hero.armor.append(copy.copy(armor_all[2][0]))
            hero.stock.used_stuff = {}
            hero.coins = 1000
            hero.perks = "000000"
            await add_hero_db(async_session, hero)
            h = await get_hero_db(async_session, str(update.effective_user.id))
            hero.base_id = h[0].id
            logger.info(update.effective_chat.first_name + f"  base_id {hero.base_id}")
            #await add_hero_armor_db(async_session, hero)
            #await add_hero_weapon_db(async_session, hero)

        else:
            hero_db = db_hero_fetch[0]
            db_hero_wp = await get_hero_weapon_db(async_session, hero_db)
            hero.from_db(hero_db)
            if hero.perks == '0':
                hero.perks ="000000"
            if hero.coins < 0:
                hero.coins = 1000
            if not hero.weapon:
                hero.weapon = copy.copy(weapons_all[0])
                hero.weapon.use = 1

            for iw in range(0, len(db_hero_wp)):
                if db_hero_wp[iw].use>1:
                    hero.drone = copy.copy(all_drones[db_hero_wp[iw].use-2])
                    hero.drone.from_db(db_hero_wp[iw])
                    continue

                dmg = int(db_hero_wp[iw].code.split('z')[0])
                z = int(db_hero_wp[iw].code.split('z')[1])
                wpn = None
                for i1 in range(0, len(weapons_all)):
                    if weapons_all[i1].dmg == dmg:
                        wpn = copy.copy(weapons_all[i1])
                        break
                wpn.from_db(db_hero_wp[iw])
                wpn.z = z
                if wpn.use:
                    hero.weapon = wpn
                else:
                    hero.stock.equip[wpn.get_code()] = wpn

            db_hero_ar = await get_hero_armor_db(async_session, hero_db)
            hero.armor = [None, None, None]
            if len(db_hero_ar):
                for irm in db_hero_ar:
                    arm_type = int(irm.code.split('t')[0])
                    arm_val = int(irm.code.split('t')[1].split('z')[0])
                    z = int(irm.code.split('t')[1].split('z')[1])
                    arm = None
                    for ia1 in range(0, len(armor_all[arm_type])):
                        if armor_all[arm_type][ia1].arm == arm_val:
                            arm = copy.copy(armor_all[arm_type][ia1])
                            break
                    arm.from_db(irm)
                    arm.z = z
                    if arm.use:
                        hero.armor[arm_type] = arm
                    else:
                        hero.stock.equip[arm.get_code()] = arm

            for i in range(0, 3):
                if not hero.armor[i]:
                    hero.armor[i] = copy.copy(armor_all[i][0])
                    hero.armor[i].use = 1

            db_hero_itms = await get_hero_items_db(async_session, hero_db)
            if len(db_hero_itms):
                for it in db_hero_itms:
                    if not hero.stock.used_stuff:
                        hero.stock.used_stuff = {}
                    hero.stock.used_stuff[it.index] = it.count
            else:
                if not hero.stock.used_stuff:
                    hero.stock.used_stuff = {}
        hero.ef_chat = update.effective_chat
        all_data[update.effective_user.id] = hero
        return hero
    else:
        return rslt


async def me_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    hero = await get_hero(update)
    #if hero.mob_fight:
    #    await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}", reply_markup=menu_attack())
    await update.message.reply_text(hero.return_data(), reply_markup=menu_pip())

rad_zones = [15, 25, 34, 45, 55, 65, 75, 85]


async def menu_sel(update: Update, hero: Hero, data_:str) -> None:
    if hero.km == 0:
        await update.message.reply_text(data_)
        return
    if hero.in_dange <= 0:
        if hero.zone <= 1:
            await update.message.reply_text(data_, reply_markup=menu_go())
        else:
            await update.message.reply_text(data_, reply_markup=menu_go_dead())
    else:
        await update.message.reply_text(data_, reply_markup=menu_go_dange())


async def danges_fin_msg(update: Update, hero: Hero) -> None:
    hero.mob_fight = None
    hero.in_dange = -1
    mob = list_mobs[hero.km // 5][0]
    coins = round(mob.calc_mob_coins(hero.km))
    mats = round(mob.calc_mob_mat(hero.km))
    hero.coins += coins
    hero.materials += mats
    prize_money = f"–ø–æ–ª—É—á–µ–Ω–æ üï≥ {coins} üì¶ {mats}\n"

    if hero.km == 10:
        r = random.randint(0, 7)
        if r == 1:
            i = random.randint(4, 6)
            hero.stock.add_item(weapons_all[i])
            await update.message.reply_text(hero.make_header() + prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {weapons_all[i].get_name()}",
                                            reply_markup=menu_go())
        else:
            await update.message.reply_text(hero.make_header() + prize_money
                                            + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                            reply_markup=menu_go())

    if hero.km == 20:
        r = random.randint(0, 7)
        if r == 2:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][5])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][5].get_name()}",
                                            reply_markup=menu_go())
        else:
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                            reply_markup=menu_go())
    if hero.km == 30:
        r = random.randint(0, 6)
        if r == 3:
            r = random.randint(7, 8)
            hero.stock.add_item(weapons_all[r])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {weapons_all[r].get_name()}",
                                            reply_markup=menu_go())
        else:
            if random.randint(0, 15) == 1 and hero.moduls == '':
                hero.add_module()
                name = hero.get_str_modul()
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + f"–≤–∞–º –≤—ã–ø–∞–ª –º–æ–¥—É–ª—å {name}",
                                                reply_markup=menu_go())
            else:
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                                reply_markup=menu_go())

    if hero.km == 35:
        r = random.randint(0, 6)
        if r == 3:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][6])
            w = armor_all[type][6]
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            if random.randint(0, 15) == 1 and len(hero.moduls) == 1:
                hero.add_module()
                name = hero.get_str_modul()
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + f"–≤–∞–º –≤—ã–ø–∞–ª –º–æ–¥—É–ª—å {name}",
                                                reply_markup=menu_go())
            else:
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                                reply_markup=menu_go())

    if hero.km == 40:
        r = random.randint(0, 6)
        if r == 4:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][7])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][7].get_name()}",
                                            reply_markup=menu_go())
        elif r == 5:
            w = weapons_all[10] if random.randint(0, 2) == 1 else weapons_all[9]
            hero.stock.add_item(w)
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            if random.randint(0, 15) == 1 and len(hero.moduls) == 2:
                hero.add_module()
                name = hero.get_str_modul()
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + f"–≤–∞–º –≤—ã–ø–∞–ª –º–æ–¥—É–ª—å {name}",
                                                reply_markup=menu_go())
            else:
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                                reply_markup=menu_go())

    if hero.km == 50:
        r = random.randint(0, 7)
        if r == 4:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][8])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][8].get_name()}",
                                            reply_markup=menu_go())
        elif r == 5:
            w = weapons_all[11 + random.randint(0, 2)]
            hero.stock.add_item(w)
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            if random.randint(0, 15) == 1 and 2 <= len(hero.moduls) <= 5:
                hero.add_module()
                name = hero.get_str_modul()
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + f"–≤–∞–º –≤—ã–ø–∞–ª –º–æ–¥—É–ª—å {name}",
                                                reply_markup=menu_go())
            else:
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                                reply_markup=menu_go())

    if hero.km == 60:
        r = random.randint(0, 7)
        if r == 4:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][9])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][9].get_name()}",
                                            reply_markup=menu_go())
        elif r == 5:
            w = weapons_all[13 + random.randint(0, 3)]
            hero.stock.add_item(w)
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            if random.randint(0, 15) == 1 and len(hero.moduls) == 6:
                hero.add_module()
                name = hero.get_str_modul()
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + f"–≤–∞–º –≤—ã–ø–∞–ª –º–æ–¥—É–ª—å {name}",
                                                reply_markup=menu_go())
            else:
                await update.message.reply_text(hero.make_header()+ prize_money
                                                + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                                reply_markup=menu_go())

    if hero.km == 70:
        r = random.randint(0, 8)
        if r == 4:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][10])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][10].get_name()}",
                                            reply_markup=menu_go())
        elif r == 5:
            w = weapons_all[17 + random.randint(0, 2)]
            hero.stock.add_item(w)
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                            reply_markup=menu_go())
    if hero.km == 80:
        r = random.randint(0, 9)
        if r == 4:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][11])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][11].get_name()}",
                                            reply_markup=menu_go())
        elif r == 5:
            w = weapons_all[20]
            hero.stock.add_item(w)
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                            reply_markup=menu_go())
    if hero.km == 90:
        r = random.randint(0, 7)
        if r == 4:
            type = random.randint(0, 2)
            hero.stock.add_item(armor_all[type][15])
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {armor_all[type][15].get_name()}",
                                            reply_markup=menu_go())
        elif r == 5:
            w = weapons_all[24]
            hero.stock.add_item(w)
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + f"–≤–∞–º –≤—ã–ø–∞–ª–æ {w.get_name()}",
                                            reply_markup=menu_go())
        else:
            await update.message.reply_text(hero.make_header()+ prize_money
                                            + "–≤–∞–º –≤—ã–ø–∞–ª–æ –Ω–∏—Ö—É—è",
                                            reply_markup=menu_go())

async def msgs_in_camp(update: Update, msg_txt:str, hero: Hero) -> None:
    hero.zone = 0
    use_10x = 1
    i = 0
    if '*' in msg_txt:
        msg_txt = msg_txt.replace('*', '')
        use_10x = 10
    if msg_txt == "üí™–°–∏–ª–∞":
        while i < use_10x:
            if hero.coins >= hero.calc_cost(hero.force) and hero.inc_force():
                hero.coins -= hero.calc_cost(hero.force)
                hero.force += 1
            else:
                break
            i += 1
        if use_10x == 1:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
        else:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())

    elif msg_txt == "üéØ–ú–µ—Ç–∫–æ—Å—Ç—å":
        while i < use_10x:
            if hero.coins >= hero.calc_cost(hero.accuracy) and hero.inc_acc():
                hero.coins -= hero.calc_cost(hero.accuracy)
                hero.accuracy += 1
            else:
                break
            i += 1
        if use_10x == 1:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
        else:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())

    elif msg_txt == "ü§∏üèΩ‚Äç‚ôÇÔ∏è–õ–æ–≤–∫–æ—Å—Ç—å":
        while i < use_10x:
            if hero.coins >= hero.calc_cost(hero.dexterity) and hero.inc_dex():
                hero.coins -= hero.calc_cost(hero.dexterity)
                hero.dexterity += 1
            else:
                break
            i += 1
        if use_10x == 1:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
        else:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())

    elif msg_txt == "‚ù§Ô∏è–ñ–∏–≤—É—á–µ—Å—Ç—å":
        while i < use_10x:
            if hero.coins >= hero.calc_cost(hero.max_hp) and hero.inc_hp():
                hero.coins -= hero.calc_cost(hero.max_hp)
                hero.max_hp += 1
                hero.hp += 1
            else:
                break
            i += 1
        if use_10x == 1:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
        else:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())
    elif msg_txt == "üó£–•–∞—Ä–∏–∑–º–∞":
        while i < use_10x:
            if hero.coins >= 10 * hero.charisma and hero.inc_char():
                hero.coins -= 10 * hero.charisma
                hero.charisma += 1
            else:
                break
            i += 1
        if use_10x == 1:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
        else:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())
    elif msg_txt == "üëº–£–¥–∞—á–∞":
        while i < use_10x:
            if hero.coins >= hero.calc_cost(hero.luck) and hero.inc_luck():
                hero.coins -= hero.calc_cost(hero.luck)
                hero.luck += 1
            else:
                break
            i += 1
        if use_10x == 1:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
        else:
            await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())
    elif msg_txt == "üí§–û—Ç–¥–æ—Ö–Ω—É—Ç—å":
        if hero.hp < hero.max_hp or hero.hungry > 0:
            if hero.coins < hero.max_hp:
                await update.message.reply_text(
                    f"–Ω—É–∂–Ω–æ {hero.max_hp} –∫—Ä—ã—à–µ–∫, –≤—ã –Ω–∏—â–∏–π –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å\n", reply_markup=menu_camp())
            else:
                hero.hp = hero.max_hp
                hero.hungry = 0
                hero.coins -= hero.max_hp
                await update.message.reply_text("–≤—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –ø–æ–µ–ª–∏")
                await update.message.reply_text(hero.return_data(), reply_markup=menu_camp())
        else:
            await update.message.reply_text("–≤—ã –∏ —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤—ã –∏ —Å—ã—Ç—ã", reply_markup=menu_camp())

    elif msg_txt == "üí∞–õ–æ–º–±–∞—Ä–¥":
        out = f"üì¶√ó{hero.materials}\n"
        out += hero.stock.get_data_lombard()
        await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt == "üëì–ò–Ω–∂–µ–Ω–µ—Ä":
        out = f"üï≥√ó{hero.coins}\n\n"
        out += "–≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥—Ä–æ–Ω–∞:\n\n"
        out += all_drones[0].get_buy_text()
        cnt_mod = len(hero.moduls)
        if cnt_mod:
            out += "\n–≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å:\n\n"
            for i in range(0, cnt_mod):
                out += f"{all_modules[i + 1][1]}  /module{i + 1}\n"
        else:
            out += "\n–Ω–µ—Ç –º–æ–¥—É–ª–µ–π"
        await update.message.reply_text(out, reply_markup=menu_pip())
    elif msg_txt == "üèö–¢–æ—Ä–≥–∞—à":
        out = f"üï≥√ó{hero.coins}\n"
        out += "–≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å:\n"
        for type in armor_all:
            i = 0
            for armor in type:
                if i < 5:
                    out += armor.get_buy() + "\n"
                i += 1
        for w in weapons_all:
            if w.dmg < 50:
                out += w.get_buy() + "\n"

        await update.message.reply_text(out, reply_markup=menu_pip())
    elif msg_txt == "–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏":
        hero.coins += round(hero.materials / 10)
        hero.materials = 0
        out = f"üì¶√ó{hero.materials}\n"
        out += hero.stock.get_data_lombard()
        await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt == "–ü—Ä–æ–¥–∞—Ç—å 1/2 –∫–æ—Ä–æ–±–æ–∫":
        hero.coins += round(hero.materials / 20)
        hero.materials -= round(hero.materials / 2)
        out = f"üì¶√ó{hero.materials}\n"
        out += hero.stock.get_data_lombard()
        await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt == "–ü—Ä–æ–¥–∞—Ç—å 1/4 –∫–æ—Ä–æ–±–æ–∫":
        hero.coins += round(hero.materials / 40)
        hero.materials -= round(hero.materials / 4)
        out = f"üì¶√ó{hero.materials}\n"
        out += hero.stock.get_data_lombard()
        await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt == "–ü—Ä–æ–¥–∞—Ç—å 1/8 –∫–æ—Ä–æ–±–æ–∫":
        hero.coins += round(hero.materials / 80)
        hero.materials -= round(hero.materials / 8)
        out = f"üì¶√ó{hero.materials}\n"
        out += hero.stock.get_data_lombard()
        await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt == "üéì–û–±—É—á–µ–Ω–∏–µ":
        await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn())
    elif msg_txt == "x10 –Ω–∞–≤—ã–∫–æ–≤":
        await update.message.reply_text(hero.learn_data(), reply_markup=menu_learn_x10())


async def text_msg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    hero = await get_hero(update)
    msg_txt = update.message.text
    out = ""
    pvp = False
    pvp_end = False
    if hero.band_name == "–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞–Ω–¥—ã":
        if len(msg_txt) < 5:
            await update.message.reply_text(f"–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ - {msg_txt}", reply_markup=menu_go())
        else:
            await update.message.reply_text(f"–≤—ã —Å–æ–∑–¥–∞–ª–∏ –±–∞–Ω–¥—É —Å –∏–º–µ–Ω–µ–º {msg_txt}", reply_markup=menu_go())
            hero.band_name = msg_txt
        return None
    if hero.km != 0:
        if hero.weapon and hero.weapon.life < 5:
            await update.message.reply_text(f"‚≠êÔ∏è‚ö°Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ, –æ—Ä—É–∂–∏–µ {hero.weapon.get_name()} —Å–∫–æ—Ä–æ —Å–ª–æ–º–∞–µ—Ç—Å—è!‚≠êÔ∏è‚ö°Ô∏è")
        for ar in hero.armor:
            if ar and ar.life < 3:
                await update.message.reply_text(f"‚≠êÔ∏è‚ö°Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ, –±—Ä–æ–Ω—è {ar.get_name()} —Å–∫–æ—Ä–æ —Å–ª–æ–º–∞–µ—Ç—Å—è!‚≠êÔ∏è‚ö°Ô∏è")

    if hero.km == 0:
        await msgs_in_camp(update, msg_txt, hero)

    if msg_txt == "üìü–ü–∏–ø-–±–æ–π":
        await update.message.reply_text(hero.return_data(), reply_markup=menu_pip())
        return

    if hero.in_dange <= 0:
        if hero.zone >= 1:
            if msg_txt == "üî™–ù–∞–ø–∞—Å—Ç—å" and hero.km != 0:
                fight = False
                for h in all_data:
                    hero_h = all_data[h]
                    if update.effective_user.id != h and hero_h.km == hero.km and hero_h.in_dange <= 0 and hero.zone == hero_h.zone:
                        chat = all_data[h].ef_chat
                        fight = True
                        out = hero.attack_pvp_wmobs(hero_h, hero.min_log)

                        hdr1 = f"–°—Ä–∞–∂–µ–Ω–∏–µ —Å {hero.get_name()}\n\n"
                        hdr2 = f"–°—Ä–∞–∂–µ–Ω–∏–µ —Å {hero_h.get_name()}\n\n"
                        if hero_h.hp < hero.hp:
                            hero_h.died_hero()  # -10%
                            hero_h.coins -= round(hero_h.coins * (0.25 + hero.get_module(6) / 100))
                            hero.coins += round(hero_h.coins * (0.23 + hero.get_module(6) / 100))
                            await chat.send_message(hdr1 + out +
                                                    f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:((((\n –ø–æ—Ç–µ—Ä—è–Ω–æ: üï≥ {round(hero_h.coins * 0.25)}",
                                                    reply_markup=menu_camp())
                            await update.message.reply_text(hdr2 + out +f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!!!\n –ø–æ–ª—É—á–µ–Ω–æ: üï≥ {round(hero_h.coins * 0.23)}")
                            pvp_end = True
                        else:
                            hero.died_hero()
                            hero.coins -= round(hero.coins * (0.25 + hero_h.get_module(6) / 100))
                            hero_h.coins += round(hero.coins * (0.23 + hero_h.get_module(6) / 100))
                            await update.message.reply_text(hdr2 + out +
                                                            f"–í—ã –ª—É–∑–µ—Ä!!!!\n –ø–æ—Ç–µ—Ä—è–Ω–æ: üï≥ {round(hero.coins * 0.25)}",
                                                            reply_markup=menu_camp())
                            await chat.send_message(
                                hdr1 + out + f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!!!\n –ø–æ–ª—É—á–µ–Ω–æ: üï≥ {round(hero.coins * 0.23)}")
                        out = ""

                        break
                if not fight:
                    await update.message.reply_text("–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É—à–µ–ª")
        if hero.zone == 1:
            if msg_txt == "üë£Ô∏è‚ò†Ô∏è–ü—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏‚ò†Ô∏è" and hero.km == 20:
                hero.zone = 2
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è")
                    # await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.name}",
                    #                                 reply_markup=menu_attack())
                else:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è",
                        reply_markup=menu_go_dead())

            if msg_txt == "üë£Ô∏èüé™ –ó–∞–π—Ç–∏ –≤ –±–ª—è–¥—Å–∫–∏–π —Ü–∏—Ä–∫üé™ Ô∏è" and hero.km == 33:
                hero.zone = 3
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –±–ª—è–¥—Å–∫–∏–π —Ü–∏—Ä–∫, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è")
                else:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –±–ª—è–¥—Å–∫–∏–π —Ü–∏—Ä–∫, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è",
                        reply_markup=menu_go_dead())

            if msg_txt == "üî™Ô∏èpainkillerüî™Ô∏è" and hero.km == 47:
                hero.zone = 4
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ üî™Ô∏èpainkillerüî™Ô∏è –∑–æ–Ω—É, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è")
                else:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ üî™Ô∏èpainkillerüî™Ô∏è –∑–æ–Ω—É, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è",
                        reply_markup=menu_go_dead())

            if msg_txt == "üë£Ô∏è–ü–∞—Ä–∫ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤" and hero.km == 66:
                hero.zone = 6
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—É—Å—Ç–æ—à—å –≥–¥–µ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è")
                    # await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.name}",
                    #                                 reply_markup=menu_attack())
                else:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—É—Å—Ç–æ—à—å –≥–¥–µ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è",
                        reply_markup=menu_go_dead())


        if hero.zone == 2:
            if msg_txt == "üë£Ô∏èüëπ–°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –∞—Ä–µ–Ω–∞üëπ" and hero.km == 30:
                hero.zone = 5
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –∞—Ä–µ–Ω—É, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è")
                else:
                    await update.message.reply_text(
                        header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –∞—Ä–µ–Ω—É, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è",
                        reply_markup=menu_go_dead())

        if msg_txt == "üî•–ó–∞–π—Ç–∏ –≤ –¥–∞–Ω–∂" and hero.km in danges.keys() and hero.in_dange == 0:
            if hero.km in hero.danges:
                await update.message.reply_text("–≤—ã —É–∂–µ –±—ã–ª–∏ –≤ –¥–∞–Ω–∂–µ, –∏–¥–∏—Ç–µ –≤ –ª–∞–≥–µ—Ä—å")
                return
            hero.mob_fight = danges[hero.km][0]
            hero.in_dange = 1
            header = hero.make_header()
            await update.message.reply_text(header + f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                            reply_markup=menu_go_dange())
        elif hero.mob_fight and msg_txt != "‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä" and msg_txt != "üèÉ–î–∞—Ç—å –¥–µ—Ä—É":
            header = hero.make_header()
            await update.message.reply_text(header + f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                            reply_markup=menu_attack())
        elif not hero.mob_fight and msg_txt == "‚õ∫Ô∏è–í –ª–∞–≥–µ—Ä—å":
            if hero.zone >= 2:
                await update.message.reply_text("‚ò†‚ò†–≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è‚ò†‚ò†", reply_markup=menu_go_dead())
            else:
                if hero.get_module(7):
                    if hero.hp > hero.max_hp:
                        hero.hp = hero.max_hp
                hero.km = 0
                hero.danges = []
                hero.necro_lvl = 1

                text_camp = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –ª–∞–≥–µ—Ä–µ!\n–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ /help \n–ß–∞—Ç –ø–æ –∏–≥—Ä–µ: https://t.me/+l1OjhV7mzwc1MGIy\n" \
                            "–ù–∞–≤–µ—Ä–Ω–æ–µ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, –∫—Ç–æ —Ç–∞–∫–∏–µ —Å–≤–∏–Ω–æ–∫—Ä—ã—Å—ã, –∞ —Å–≤–∏–Ω–æ–∫—Ä—ã—Å - —ç—Ç–æ –≤—ã–¥—É–º–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ —Ä—É—Å—Å–∫–æ–π –Ω–∞—Ä–æ–¥–Ω–æ–π —Å–∫–∞–∑–∫–∏. –≠—Ç–æ —Å—É—â–µ—Å—Ç–≤–æ —Å –æ–±—ä–µ–¥–∫–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—É–≥–∞—Ç—å –¥–µ—Ç–µ–π –∏ –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å –∏—Ö –±—ã—Ç—å –ø–æ—Å–ª—É—à–Ω—ã–º–∏. –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö —Å–∫–∞–∑–∫–∏ —Å–≤–∏–Ω–æ–∫—Ä—ã—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ–ª—É-—Å–≤–∏–Ω—å—è, –ø–æ–ª—É-–∫—Ä—ã—Å–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –Ω–∞ –∑–∞–¥–Ω–∏—Ö –ª–∞–ø–∞—Ö –∏ –¥–∞–∂–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ. –í —Å–∫–∞–∑–∫–∞—Ö –æ–±—ã—á–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ —Å–≤–∏–Ω–æ–∫—Ä—ã—Å –∂–∏–≤–µ—Ç –≤ –ø–µ—á–∏, –≤ –ø–æ–¥–≤–∞–ª–µ –∏–ª–∏ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ –∏ —Ç–∞–π–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º –∏–ª–∏ –¥–µ–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ –ø–ª–æ—Ö–æ–µ."
                await update.message.reply_text(text_camp, reply_markup=menu_camp())

        elif msg_txt == "üë£–ü—É—Å—Ç–æ—à—å" and hero.zone == 0:
            hero.go()
            header = hero.make_header()
            hero.select_mob()
            if hero.mob_fight:
                await update.message.reply_text(header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—É—Å—Ç–æ—à—å")
                await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                                reply_markup=menu_attack())
            else:
                await update.message.reply_text(header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –ø—É—Å—Ç–æ—à—å", reply_markup=menu_go())

        elif msg_txt == "üë£‚ò¢–†–∞–¥-Ô∏è–ü—É—Å—Ç–æ—à—å":
            if hero.km in rad_zones and hero.zone<=1 or hero.km == 0:
                hero.zone = 1
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø—É—Å—Ç–æ—à—å")
                    await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                                    reply_markup=menu_attack())
                else:
                    await update.message.reply_text(header + "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø—É—Å—Ç–æ—à—å",
                                                    reply_markup=menu_go())

        elif msg_txt == "‚ò¢–ü–æ–∫–∏–Ω—É—Ç—å –†–∞–¥-Ô∏è–ü—É—Å—Ç–æ—à—å‚ò¢" and hero.zone == 1:
            if hero.km in rad_zones:
                hero.zone = 0
                hero.go()
                header = hero.make_header()
                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(header + "–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø—É—Å—Ç–æ—à—å")
                    await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                                    reply_markup=menu_attack())
                else:
                    await update.message.reply_text(header + "–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø—É—Å—Ç–æ—à—å",
                                                    reply_markup=menu_go())

        elif msg_txt == "Ô∏è‚ò†–ü–æ–∫–∏–Ω—É—Ç—å –ø—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏‚ò†" and hero.zone == 2:
            hero.zone = 1
            hero.go()
            header = hero.make_header()
            hero.select_mob()
            if hero.mob_fight:
                await update.message.reply_text(header + "–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏")
                await update.message.reply_text(f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                                reply_markup=menu_attack())
            else:
                await update.message.reply_text(header + "–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏",
                                                reply_markup=menu_go())
        elif msg_txt == "‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä":
            mob = hero.mob_fight
            if mob:
                res = hero.attack_mob(mob, False, hero.min_log)
                hero.mob_fight = None
                if hero.km != 0:
                    if mob.enfect and not hero.km_protect:
                        out_eff = ""
                        if hero.buffs[0] < 0:
                            out_eff = f"c–∏–ª–∞ {hero.buffs[0]}\n"
                        if hero.buffs[1] < 0:
                            out_eff += f"–ª–æ–≤–∫–æ—Å—Ç—å {hero.buffs[1]}\n"
                        if hero.buffs[2] < 0:
                            out_eff += f"—É–¥–∞—á–∞ {hero.buffs[2]}\n"
                        if hero.buffs[3] < 0:
                            out_eff += f"—Ç–æ—á–Ω–æ—Å—Ç—å {hero.buffs[3]}\n"

                        await update.message.reply_text(f"–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞—Ä–∞–∂–µ–Ω—ã:{out_eff}\n–ü–µ–π—Ç–µ –±–∞—Ñ—Ñ—ã: /buff")
                    await menu_sel(update, hero, hero.make_header() + res)
                else:
                    hero.hp = 1
                    await update.message.reply_text(res)
                    await update.message.reply_text(hero.return_data(), reply_markup=menu_camp())
            else:
                await update.message.reply_text(hero.return_data(), reply_markup=menu_pip())
        elif msg_txt == "üèÉ–î–∞—Ç—å –¥–µ—Ä—É":
            if hero.mob_fight:
                k = hero.dexterity - hero.mob_fight.dexterity
                lost = round(hero.mob_fight.calc_mob_coins(hero.km) * 2)
                if hero.coins > lost:
                    hero.coins -= lost

                if k > random.randint(0, 1000):
                    if hero.coins < 0:
                        hero.coins = 0

                    await update.message.reply_text(hero.make_header() +
                                                    f"–ø–æ–±–µ–≥ —É—Å–ø–µ—à–µ–Ω, –Ω–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ üï≥ {lost}\n",
                                                    reply_markup=menu_go())
                else:
                    dmg = round(hero.mob_fight.get_attack())
                    hero.hp -= dmg
                    if round(hero.hp) <= 0:
                        hero.died_hero()
                        await update.message.reply_text(
                            f"–ø–æ–±–µ–≥ –Ω–µ —É—Å–ø–µ—à–µ–Ω, —Ç—ã –ø–æ–º–µ—Ä\:\(, –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ üï≥ {lost}",
                            reply_markup=menu_camp())
                    else:
                        await menu_sel(update, hero, hero.make_header() +
                                                         f"–ø–æ–±–µ–≥ –Ω–µ —É—Å–ø–µ—à–µ–Ω\(, –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ üíî {dmg} üï≥ {lost}")

                hero.mob_fight = None

        elif msg_txt == "üë£–ò–¥—Ç–∏ –∫ –ª–∞–≥–µ—Ä—é":
            if hero.zone > 1:
                await update.message.reply_text("–ù–µ–ª—å–∑—è –∏–¥—Ç–∏ —Ç—É—Ç –Ω–∞–∑–∞–¥!")
                return
            if hero.km <= 1:
                hero.km = 0
                await update.message.reply_text(hero.return_data(), reply_markup=menu_camp())
                return
            hero.go(True)

            if hero.hungry < 100:
                if not hero.zone:
                    hero.hungry += 2
                else:
                    hero.hungry += 3
            else:
                hero.hp -= round(hero.max_hp / 5)
            if hero.hungry > 100:
                hero.hungry = 100
            if hero.hp > 0:
                if hero.hungry > 96:
                    await update.message.reply_text("‚≠êÔ∏è‚ö°–≤—ã –≥–æ–ª–æ–¥–Ω—ã, —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç–µ —É–º–∏—Ä–∞—Ç—å‚≠êÔ∏è\n/food ‚ö°")
                header = hero.make_header()
                if random.randint(0, 10) > 8:
                    hero.mob_fight = copy.copy(list_boss[0])
                    hero.mob_fight.name = "üíÄ–¢–µ–Ω–µ–≤–æ–π –Ω–µ–∫—Ä–æ–º–æ–Ω—Å—Ç—Ä ‚ö°Ô∏èüåü‚ö°"
                    hero.mob_fight.attack = hero.max_hp*hero.necro_lvl
                    hero.mob_fight.luck = hero.luck/1.5
                    hero.mob_fight.dexterity = hero.dexterity/1.5
                    hero.mob_fight.accuracy = 5000
                    hero.mob_fight.hp = round(hero.max_hp*1.5*hero.necro_lvl)
                    hero.necro_lvl += 0.2
                else:
                    hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(header + f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                                    reply_markup=menu_attack())
                else:
                    text_go = text_mess_go[random.randint(0, len(text_mess_go)-1)]
                    await update.message.reply_text(header + text_go, reply_markup=menu_go())
            else:
                out = hero.died_hero_mob()
                await update.message.reply_text("‚≠êÔ∏è‚ö°—Ç—ã —Å–¥–æ—Ö –æ—Ç –≥–æ–ª–æ–¥–∞((((‚≠êÔ∏è‚ö°\n" + out, reply_markup=menu_camp())

        elif msg_txt == "üë£–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ":
            if hero.km == 45 and hero.zone == 5:
                hero.zone = 1
                await update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞—Ä–µ–Ω—É! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")

            if hero.km == 44 and hero.zone == 3:
                hero.zone = 1
                await update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–ª—è–¥—Å–∫–∏–π —Ü–∏—Ä–∫")

            if hero.km == 79 and hero.zone == 6:
                hero.zone = 0
                await update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∑–æ–Ω—É –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤")

            if hero.km == 59 and hero.zone == 4:
                hero.zone = 1
                await update.message.reply_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ painkiller zone")
            hero.go()
            if hero.hungry < 100:
                if not hero.zone:
                    hero.hungry += 2
                else:
                    hero.hungry += 3
            else:
                hero.hp -= round(hero.max_hp / 5)
            if hero.hungry >100:
                hero.hungry = 100
            if hero.hp > 0:
                if hero.hungry > 96:
                    await update.message.reply_text("‚≠êÔ∏è‚ö°–≤—ã –≥–æ–ª–æ–¥–Ω—ã, —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç–µ —É–º–∏—Ä–∞—Ç—å‚≠êÔ∏è\n/food ‚ö°")
                header = hero.make_header()
                if hero.in_dange < 0:
                    hero.in_dange = 0

                hero.select_mob()
                if hero.mob_fight:
                    await update.message.reply_text(header + f"–Ω–∞ –≤–∞—Å –Ω–∞–ø–∞–ª –º–æ–± {hero.mob_fight.get_name()}",
                                                    reply_markup=menu_attack())
                else:
                    text_go = text_mess_go[random.randint(0, len(text_mess_go)-1)]
                    if hero.zone in [1, 2] and random.randint(0, 15) == 4:
                        rkey, ritem = get_random_food()
                        text_go += f"\n–±–æ–Ω—É—Å –∑–æ–Ω—ã:\n{ritem['name']} /ustf_{rkey}\n"
                        hero.stock.add_stuff(rkey)
                    if hero.zone <= 1:
                        await update.message.reply_text(header + text_go, reply_markup=menu_go())
                    elif hero.zone >= 2:
                        await update.message.reply_text(header + text_go, reply_markup=menu_go_dead())

            else:
                out = hero.died_hero_mob()
                await update.message.reply_text("‚≠êÔ∏è‚ö°—Ç—ã —Å–¥–æ—Ö –æ—Ç –≥–æ–ª–æ–¥–∞((((‚≠êÔ∏è‚ö°\n" + out, reply_markup=menu_camp())

    else:
        if msg_txt == "üë£–î–∞–ª—å—à–µ":
            if hero.in_dange >= len(danges[hero.km]):
                await danges_fin_msg(update, hero)
                hero.hungry += 2
                hero.danges.append(hero.km)
            else:
                mob = hero.mob_fight
                if mob:
                    res = hero.attack_mob(mob, True, hero.min_log)
                    if hero.km != 0:
                        await update.message.reply_text(res)
                        await update.message.reply_text(hero.make_header() + "–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–¥—Ç–∏",
                                                        reply_markup=menu_go_dange())
                        hero.mob_fight = danges[hero.km][hero.in_dange]
                        hero.in_dange += 1
                    else:
                        hero.hp = 1
                        hero.mob_fight = None
                        hero.in_dange = 0
                        await update.message.reply_text(res)
                        await update.message.reply_text(hero.return_data(), reply_markup=menu_camp())

    if msg_txt == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        if hero.km == 0:
            await update.message.reply_text(hero.return_data(), reply_markup=menu_camp())
            return
        else:
            await menu_sel(update, hero, "–í—ã –≤ –¥–æ—Ä–æ–≥–µ, –∏–¥–∏—Ç–µ –¥–∞–ª—å—à–µ")

    if msg_txt == "üéí–†—é–∫–∑–∞–∫":
        if hero.in_dange <= 0:
            await update.message.reply_text(hero.stock.get_data(), reply_markup=menu_pip())
        else:
            await update.message.reply_text(hero.stock.get_data(), reply_markup=menu_go_dange())
        return
    elif msg_txt == "üîù–¢–æ–ø—ã":
        data = "/topkm  - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–º\n/topcoins" + \
               " - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º\n/tophp - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤" + \
               "–ø–æ hp\n/topbm - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—É–º–º–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
        await update.message.reply_text(data, reply_markup=menu_pip())
        return

    logger.info(update.effective_chat.first_name + f"  {msg_txt}  {hero.km}km")
    if not hero.mob_fight:
        if hero.in_dange == 0:
            if hero.km != 0 or msg_txt == "üîé–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è":
            #if hero.km != 0:
                out = ""
                for h in all_data:
                    hero_h = all_data[h]
                    if update.effective_user.id != h and hero_h.km == hero.km and hero.zone == hero_h.zone:
                        zone = "‚ò¢" if hero_h.zone == 1 else ""
                        if hero.km!=27:
                            out += f"{zone}{hero_h.get_name()}\n"
                        else:
                            out += f"{hero_h.get_name()}  /add_band{hero_h.all_km}\n"

                if out != "":
                    pvp = True
                    out = "–≤–æ–∑–ª–µ –≤–∞—Å –∏–≥—Ä–æ–∫–∏:\n" + out
                    if hero.km != 0:
                        if hero.zone >= 1:
                            if hero.km==27:
                                await update.message.reply_text(out, reply_markup=menu_go())
                                return
                        if hero.zone == 0:
                            pvp = False
                        await update.message.reply_text(out, reply_markup=menu_go(pvp))
                    else:
                        await update.message.reply_text(out, reply_markup=menu_camp())
                        return
                else:
                    pvp = False



        if hero.km in danges.keys() and hero.in_dange == 0 and hero.zone == 0:
            await update.message.reply_text("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –≤—Ö–æ–¥ –≤ –ø–µ—â–µ—Ä—É", reply_markup=menu_dange())
            return

        if hero.zone == 2:
            if hero.km == 30:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –Ω–∞ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –∞—Ä–µ–Ω—É üëπüëπ", reply_markup=menu_mk(pvp))
                return

        if hero.zone == 1:
            if hero.km == 30:
                await update.message.reply_text(f"–ú–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –¥–∑–µ–Ω, –≤—Å–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ üï≥{hero.get_in_dzen()}\n–ü–æ–º–µ—Å—Ç–∏—Ç—å –∫—Ä—ã—à–∫–∏ –≤ –¥–∑–µ–Ω /dzen", reply_markup=menu_go(pvp))
                return

            if hero.km == 20:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –ø—É—Å—Ç–æ—à—å —Å–º–µ—Ä—Ç–∏", reply_markup=menu_dead(pvp))
                return

            if hero.km == 33:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –ø—É—Å—Ç–æ—à—å –≥–¥–µ –∂–∏–∑–Ω—å —ç—Ç–æ —Ü–∏—Ä–∫ü§°ü§°ü§°", reply_markup=menu_clown(pvp))
                return

            if hero.km == 47:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –ø—É—Å—Ç–æ—à—å painkillerüî™", reply_markup=menu_painkiller(pvp))
                return

            if hero.km == 66:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –ø—É—Å—Ç–æ—à—å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤", reply_markup=menu_dino(pvp))
                return

            if hero.km == 31 or hero.km == 16:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Å—Å–∞, –µ—Å–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ 100 –±—Ä–æ–Ω–∏ –æ–Ω–∞ –±—É–¥–µ—Ç "
                                                "–ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∫ 100, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 400 —Ö–ø "
                                                "–±—Ä–æ–Ω—è –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∫ 0. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ 5. —É–¥–∞—á–∏))))\n/goboss",
                                                reply_markup=menu_go(pvp))
                return

        if hero.km == 27 and hero.zone <= 1:
            await update.message.reply_text("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–Ω–¥—É.\n–° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /make_band \n–°—Ç–æ–∏—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç 30000 –∫—Ä—ã—à–µ–∫\n–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–∞–Ω–¥—ã /leave_band", reply_markup=menu_go())
            return

        if hero.km == 52:
            await update.message.reply_text("–ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å /deeprest", reply_markup=menu_go(pvp))
            return

        if hero.km in [34, 44, 54, 64, 74] and hero.zone == 2:
            await update.message.reply_text("–ú–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –ø—É—Å—Ç–æ—à–∏ —Å–º–µ—Ä—Ç–∏", reply_markup=menu_dead_quit(pvp))
            return

        if hero.km in rad_zones and hero.zone <= 1:
            if hero.zone == 1:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—É—Å—Ç–æ—à–∏", reply_markup=menu_rad_quit(pvp))
            else:
                await update.message.reply_text("–ú–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Ä–∞–¥–∏–∞–∫—Ç–∏–≤–Ω—É—é –ø—É—Å—Ç–æ—à—å", reply_markup=menu_rad(pvp))
            return

        if pvp_end and out == "":
            await update.message.reply_text("–≤—ã –≤ –ø—É—Å—Ç–æ—à–∏", reply_markup=menu_go())



async def boss_fight(boss_id: int = 0) -> None:
    if not boss_id:
        return
    list_heroes = []
    for h in all_data:
        hero_h = all_data[h]
        if hero_h.go_boss == boss_id:
            list_heroes.append(hero_h)
    Hero.attack_boss(list_heroes, list_boss[boss_id-1], boss_id=boss_id)

    str_heroes = "\n"
    for i in range(0, len(list_heroes)):
        if list_heroes[i].hp <= 0:
            str_heroes += f"üíÄ{list_heroes[i].name}\n"
        else:
            str_heroes += f"üèÜ{list_heroes[i].name}\n"

    for i in range(0, len(list_heroes)):
        if list_heroes[i].hp <= 0:
            list_heroes[i].died_hero()
            await list_heroes[i].ef_chat.send_message(list_heroes[i].text_out_boss + str_heroes,
                                                      reply_markup=menu_camp())
        else:
            await list_heroes[i].ef_chat.send_message(list_heroes[i].text_out_boss + str_heroes)


async def comm_msg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg_txt = update.message.text
    logger.info(update.effective_chat.first_name + "  " + msg_txt)
    hero = await get_hero(update)
    data = ""
    if "/savebase" == msg_txt:
        for k in all_data:
            h = all_data[k]
            await upd_hero_db(async_session, h)
            await delete_hero_weapon_db(async_session, h)
            await delete_hero_armor_db(async_session, h)
            await add_hero_armor_db(async_session, h)
            await add_hero_weapon_db(async_session, h)
            await update_hero_items(async_session, h)
            #await upd_indexes(async_session, h)
    #elif "/initbase" == msg_txt:
    #    await create_table_db(async_session)
    elif "/updindex" == msg_txt:
        await upd_indexes(async_session)
    elif msg_txt.startswith("/tophp"):
        def sortf(e):
            return e.max_hp

        all = await get_hero_db(async_session)
        all.sort(reverse=True, key=sortf)
        p = k = 0
        for h in all:
            if h.id == hero.base_id:
                p = k
            if 5 > k or k >= len(all) - 5:
                data += f"{k+1}. {h.max_hp} || {h.get_name()}\n"
            if k == 5:
                data += "------------\n"
            k += 1
        data += f"\n{p+1}. {hero.max_hp} || {hero.get_name()}\n"

    elif msg_txt.startswith("/topkm"):
        def sortf(e):
            return e.all_km

        all = await get_hero_db(async_session)
        all.sort(reverse=True, key=sortf)
        p = k = 0
        for h in all:
            if h.id == hero.base_id:
                p = k
            if 5 > k or k >= len(all) - 5:
                data += f"{k+1}. {h.all_km} || {h.get_name()}\n"
            if k == 5:
                data += "------------\n"
            k += 1
        data += f"\n{p+1}. {hero.all_km} || {hero.get_name()}\n"


    elif msg_txt.startswith("/topcoins"):
        def sortf(e):
            return e.coins
        all = await get_hero_db(async_session)
        all.sort(reverse=True, key=sortf)
        p = k = 0
        for h in all:
            if h.id == hero.base_id:
                p = k
            if 5 > k or k >= len(all) - 5:
                data += f"{k+1}. {h.coins} || {h.get_name()} \n"
            if k == 5:
                data += "------------\n"
            k += 1
        data += f"\n{p+1}. {hero.coins} || {hero.get_name()}\n"

    elif msg_txt.startswith("/topbm"):
        def sortf(e):
            return e.max_hp + e.force + e.accuracy + e.luck + e.dexterity + e.charisma
        all = await get_hero_db(async_session)
        all.sort(reverse=True, key=sortf)
        p = k = 0
        for h in all:
            if h.id == hero.base_id:
                p = k
            if 5 > k or k >= len(all) - 5:
                data += f"{k+1} {h.max_hp + h.force + h.accuracy + h.luck + h.dexterity + h.charisma} || {h.get_name()}\n"
            if k == 5:
                data += "\n"
            k += 1
        data += f"\n{p+1} {hero.max_hp + hero.force + hero.accuracy + hero.luck + hero.dexterity + hero.charisma} || {hero.get_name()}\n"

    # elif "/cheatw" in msg_txt:
    #    hero.stock.equip[armor_all[0][6].get_code()] = copy.copy(armor_all[0][6])
    #elif "/gokm" in msg_txt:
    #    x = int(msg_txt.replace("/gokm", ""))
    #    hero.km = x
    elif msg_txt.startswith("/name_drone"):
        if len(msg_txt.replace("/name_drone", "")) > 100:
            return
        if hero.drone:
            hero.drone.name = msg_txt.replace("/name_drone", "")
    elif "/online" == msg_txt:
        for h in all_data:
            hero_h = all_data[h]
            if hero_h.id != hero.id:
                data += f"{hero_h.get_name()} {hero_h.km}\n"
    elif "/band" == msg_txt:
        if hero.band_name:
            all = await get_hero_db(async_session)
            data = f"–≤—ã –≤ –±–∞–Ω–¥–µ {hero.band_name}:\n"
            for h in all:
                if h.id != hero.base_id and hero.band_name == h.band_name:
                    data += f"{h.name}\n"

    elif msg_txt.startswith("/msgall"):
        msg = msg_txt.replace("/msgall", "")
        for h in all_data:
            hero_h = all_data[h]
            if hero_h.id != hero.id:
                chat = all_data[h].ef_chat
                await chat.send_message(msg)
    # elif "/cheatgg" in msg_txt:
    #     x = int(msg_txt.replace("/cheatgg", ""))
    #     hero.coins = 1000
    #     hero.materials = 0
    #     hero.hp = x
    #     hero.max_hp = x
    #     hero.force = x
    #     hero.luck = x
    #     hero.dexterity = x
    #     hero.accuracy = x
    #     hero.charisma = x

    elif msg_txt == "/mystock":
        data = hero.stock.get_data()
    elif msg_txt == "/help":
        data = "–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—É—Å—Ç–æ—à–∏.\n\n–ü—Ä–æ –æ–±—ã—á–Ω—É—é –ø—É—Å—Ç–æ—à—å.\n–í –∏–≥—Ä–µ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –ø—É—Å—Ç–æ—à—å, –≥–¥–µ –Ω–µ–ª—å–∑—è –Ω–∞–ø–∞–¥–∞—Ç—å –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤. –ï—Å–ª–∏ —É–º—Ä–µ—à—å –¥–æ 30 –∫–º, —Ç–æ –Ω–µ —Ç–µ—Ä—è–µ—à—å –∫—Ä—ã—à–µ–∫. –ï—Å–ª–∏ —É–º–∏—Ä–∞–µ—à—å –ø–æ—Å–ª–µ 30–∫–º –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, —Ç–æ —Ç–µ—Ä—è–µ—à—å 25%. –ö–æ—Ä–æ–±–∫–∏ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è. –° –º–æ–±–æ–≤ –≤—ã–ø–∞–¥–∞–µ—Ç –µ–¥–∞ –∏ –±–∞—Ñ—Ñ—ã. –ë–∞—Ñ—Ñ—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —Å–Ω–∏–º–∞–Ω–∏—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è. –ó–∞—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–º–∞–µ—Ç 1/2 —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ï–¥–∞ –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≥–æ–ª–æ–¥–∞. –ù–∞ 52–∫–º –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –≥–æ–ª–æ–¥.–î–∞–Ω–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Å—Ç–æ—à–∏. –î—Ä–æ–Ω—ã –Ω–µ –≤—ã–ø–∞–¥–∞—é—Ç, –Ω–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —É –∏–Ω–∂–µ–Ω–µ—Ä–∞. –ú–æ–∂–Ω–æ –∏–¥—Ç–∏ –Ω–∞–∑–∞–¥, –Ω–æ —Å —à–∞–Ω—Å–æ–º 25% –Ω–∞–ø–∞–¥–µ—Ç –º–æ–Ω—Å—Ç—Ä. –ú–æ–±—ã –∫–∞–∂–¥—ã–µ 5–∫–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ. \n\n–ü—Ä–æ —Ä–∞–¥ –ø—É—Å—Ç–æ—à—å.\n–°–º–µ—Ä—Ç—å –≤ —ç—Ç–æ–π –∑–æ–Ω–µ -50%, –∫–∞–∫ –∏ –≤ –¥—Ä—É–≥–∏—Ö –∑–æ–Ω–∞—Ö, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π. –ú–æ–±—ã –≤ 2 —Ä–∞–∑–∞ —Å–∏–ª—å–Ω–µ–µ —á–µ–º –≤ –æ–±—ã—á–Ω–æ–π. –í—Ö–æ–¥ –≤ —Ä–∞–¥ –≤ –ª–∞–≥–µ—Ä–µ. –ê —Ç–∞–∫–∂–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã –Ω–∞ 15–∫–º, 25–∫–º, 34–∫–º, 45–∫–º, 55–∫–º, 65–∫–º. –ü–æ—Å–ª–µ 30–∫–º –≤ —Ä–∞–¥ –≤—ã–ø–∞–¥–∞—é—Ç —Å—Ç–∏–º–±–ª–∞—Å—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Å–∏–ª—å–Ω—ã–µ –∞–ø—Ç–µ—á–∫–∏. –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –±–∞—Ñ—Ñ–æ–≤ –∏ –µ–¥—ã. –í—ã–ø–∞–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –¥—Ä–æ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç. –ù–∞ 20–∫–º –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –∑–æ–Ω—É. –ù–∞ 33–∫–º –≤—Ö–æ–¥ –≤ –∑–æ–Ω—É –±–ª—è–¥—Å–∫–æ–≥–æ —Ü–∏—Ä–∫–∞, –Ω–∞ 47–∫–º –≤—Ö–æ–¥ –≤ painkiller –∑–æ–Ω—É. –í –Ω–µ–π –µ—Å—Ç—å –Ω–∞ 30–∫–º –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∑–µ–Ω–∞, –Ω–∞ 16–∫–º –∏ 31–∫–º –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Å—Å–∞. –ú–æ–±—ã –∫–∞–∂–¥—ã–µ 5–∫–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ. \n\n–ü—Ä–æ –∑–æ–Ω—É —Å–º–µ—Ä—Ç–∏.\n–í—Ö–æ–¥ –Ω–∞ 20–∫–º –≤ –∑–æ–Ω—É. –í—ã—Ö–æ–¥—ã 34–∫–º, 44–∫–º, 54–∫–º. –†–∞–Ω—å—à–µ –≤—ã–π—Ç–∏ –∏–∑ –∑–æ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∏–≤—à–∏—Å—å –≤ –ª–∞–≥–µ—Ä—å –Ω–µ–ª—å–∑—è. –¢–∞–º —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –º–æ–±—ã. –¢–∞–º –≤—ã–ø–∞–¥–∞—é—Ç –∞–ø—Ç–µ—á–∫–∏, –¥—Ä–æ–Ω –∫–∞–∫ –≤ —Ä–∞–¥, —Å –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º  –≤—ã–ø–∞–¥–∞–µ—Ç –±—Ä–æ–Ω—è –∏ –æ—Ä—É–∂–∏–µ —Å –º–æ–±–æ–≤. –ï—Å—Ç—å –≤—Ö–æ–¥ –≤ –∞—Ä–µ–Ω—É —Å–º–µ—Ä—Ç–∏ –Ω–∞ 30–∫–º. –ú–æ–±—ã –∫–∞–∂–¥—ã–µ 5–∫–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ. –í—ã–ø–∞–¥–∞—é—Ç –º–æ–¥–∏—Ñ–∏–∞–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é.\n\n–ü—Ä–æ –∑–æ–Ω—É –∫–ª–æ—É–Ω–æ–≤.\n–í—Ö–æ–¥ –Ω–∞ 33–∫–º. –í—ã–ø–∞–¥–∞–µ—Ç —Ç–∞–∫–æ–π –∂–µ –¥—Ä–æ–Ω –∫–∞–∫ –≤ —Ä–∞–¥. –¢–∞–∫–∂–µ –≤—ã–ø–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è –∏ –æ—Ä—É–∂–∏–µ. –í—ã—Ö–æ–¥–∏—à—å –¥–æ–π–¥—è –¥–æ –∫–æ–Ω—Ü–∞ –∑–æ–Ω—ã –Ω–∞ 44–∫–º. –û—Å–æ–±—ã–µ –º–æ–±—ã —Ä–∞–∑–Ω–æ–π —Å–∏–ª—ã —Ä–∞–Ω–¥–æ–º–Ω–æ –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–º–µ–∂—É—Ç–∫—É –∑–æ–Ω—ã.\n\n–ü—Ä–æ painkiller –∑–æ–Ω—É.\n–í—Ö–æ–¥ –Ω–∞ 47–∫–º –∏–∑ —Ä–∞–¥ –ø—É—Å—Ç–æ—à–∏. –í—ã—Ö–æ–¥ –Ω–∞ 59–∫–º. –í –∑–æ–Ω–µ –æ–±–∏—Ç–∞—é—Ç –æ—Å–æ–±—ã–µ –º–æ–±—ã –∏ —Ä–∞–Ω–¥–æ–º–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –ø—É—Å—Ç–æ—à–∏. –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–ø—Ç–µ—á–µ–∫. –í—ã–ø–∞–¥–∞–µ—Ç –æ—Å–æ–±—ã–π –¥—Ä–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–ª—å–Ω–µ–µ —á–µ–º –≤ —Ä–∞–¥. –í—ã–ø–∞–¥–∞—é—Ç –º–æ–¥–∏—Ñ–∏–∞–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é.\n\n–ü—Ä–æ arena –∑–æ–Ω—É.\n–í—Ö–æ–¥ –Ω–∞ 30–∫–º –∏–∑ –ø—É—Å—Ç–æ—à–∏ —Å–º–µ—Ä—Ç–∏. –¢–∞–º –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –º–æ–±—ã –∏ —Å –∫–∞–∂–¥—ã–º –∫–º —Å–∏–ª—å–Ω–µ–µ. –ò–∑ —Å–∞–º–æ–≥–æ —Å–∏–ª—å–Ω–æ–≥–æ –º–æ–±–∞ –≤—ã–±–∏–≤–∞–µ—Ç—Å—è –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—è. –í—ã–ø–∞–¥–∞—é—Ç –∞–ø—Ç–µ—á–∫–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ. –¢–∞–∫–∂–µ —Ç–∞–º –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∞–º–æ–≥–æ —Å–∏–ª—å–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞. –í—ã—Ö–æ–¥ –≤ —Ä–∞–¥ –∑–æ–Ω—É –Ω–∞ 46 –∫–º. –¢–∞–∫–∂–µ –≤—ã–ø–∞–¥–∞—é—Ç –º–æ–¥–∏—Ñ–∏–∞–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é.\n\n–ü—Ä–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã.\n–ï—Å—Ç—å –∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ö–∞–∫—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä—É–∂–∏—è –∏–ª–∏ –±—Ä–æ–Ω–∏, –Ω–æ —Å–Ω–∏–∂–∞—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è. –ê –µ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∏–∂–∞—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ä—É–∂–∏—è –∏ –±—Ä–æ–Ω–∏, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –Ω–∞–≤—ã–∫–∏ –≥–µ—Ä–æ—è.\n\n–ü—Ä–æ –º–æ–¥—É–ª–∏.\n–ú–æ–¥—É–ª–∏ –≤—ã–ø–∞–¥–∞—é—Ç –≤ –¥–∞–Ω–∂–∞—Ö. 30–∫–º - 1 –º–æ–¥—É–ª—å, 35–∫–º- 1 –º–æ–¥—É–ª—å, 40–∫–º- 1 –º–æ–¥—É–ª—å, 50–∫–º- 3 –º–æ–¥—É–ª—è, 60–∫–º - 1 –º–æ–¥—É–ª—å. –ê–∫–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É. –ù–æ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —É –∏–Ω–∂–µ–Ω–µ—Ä–∞. \n\n–ü—Ä–æ –±–∞–Ω–¥—ã.\n–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –±–∞–Ω–¥—É –Ω–∞ 27–∫–º. –ó–∞–±–∏—Ä–∞—Ç—å –∫ —Å–µ–±–µ –≤ –±–∞–Ω–¥—É –º–æ–∂–µ—Ç –ª—é–±–æ–π. –ù–∞–¥–æ —á—Ç–æ–±—ã –≤—ã –±—ã–ª–∏ –≤ –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ—à–∏.\n\n–ü—Ä–æ –ø–µ—Ä–∫–∏.\n–ï—Å—Ç—å 6 –ø–µ—Ä–∫–æ–≤. –î–µ–π—Å—Ç–≤—É—é—Ç –≤ –ø–≤–ø –∏ —Å –¥—Ä–æ–Ω–∞–º–∏. –ù—É–∂–Ω—ã —Ç–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è 1-4 –ø–µ—Ä–∫–æ–≤ - 250, 550, 850, 1150. –û—á–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ 1250 —Ç—Ä–∞—Ç—è—Ç—Å—è –Ω–∞ –ø–µ—Ä–∫. –°–∏–ª–∞ –∫—Ä–∞—Ç–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É, –ª–æ–≤–∫–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–æ–≤–∫–æ—Å—Ç—å, —É–¥–∞—á–∞ –¥–∞–µ—Ç —à–∞–Ω—Å –Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é 30%, —Ö–∞—Ä–∏–∑–º–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±–∏—Ç–≤—É –¥—Ä–æ–Ω–∞, –º–µ—Ç–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–±—Ä–æ—Å —É—Ä–æ–Ω–∞, –∂–∏–≤—É—á–µ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±—Ä–æ–Ω—é."
    elif msg_txt == "/mods":
        data = hero.stock.get_mods()
    elif msg_txt == "/food":
        data = hero.stock.print_stuff(1)
    elif msg_txt == "/buff":
        data = hero.stock.print_stuff(2)
    elif msg_txt == "/boss":
        cnt_boss = 0
        for h in all_data:
            hero_h = all_data[h]
            if hero.go_boss and hero_h.go_boss == hero.go_boss:
                cnt_boss += 1
        if cnt_boss:
            await update.message.reply_text(f"–∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –±–æ—Å—Å–∞ {list_boss[hero.go_boss-1].name} {cnt_boss}")
        else:
            await update.message.reply_text(f"–Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –Ω–∞ –±–æ—Å—Å–∞")

    # elif "/additm" in msg_txt:
    #     msg = msg_txt.replace("/additm", "")
    #     items = msg.split("u")
    #     user = items[0]
    #     item = items[1]
    #     for h in all_data:
    #         if h == user:
    #             hero_h = all_data[h]
    #             if item.startswith("w"):
    #                 dmg = item.replace("w", "")
    #                 for weapon in weapons_all:
    #                     if str(weapon.dmg) == dmg:
    #                         hero_h.stock.add_item(weapon)
    #             if item.startswith("a"):
    #                 arm = item.replace("a", "")
    #                 arm = arm.split('t')
    #                 for armor in armor_all[arm[0]]:
    #                     if str(armor.arm) == arm[1]:
    #                         hero_h.stock.add_item(armor)

    elif msg_txt.startswith("/set_name "):
        name = msg_txt.replace("/set_name ", "")
        hero.name = name

    elif msg_txt == "/startboss":
        if hero.go_boss:
            await boss_fight(hero.go_boss)
        else:
            await update.message.reply_text(f"–Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –Ω–∞ –±–æ—Å—Å–∞")

    elif msg_txt == "/goboss" and (hero.km == 31 or hero.km == 16) and hero.zone == 1:
        if not hero.go_boss:
            if hero.km == 16:
                hero.go_boss = 2
            if hero.km == 31:
                hero.go_boss = 1
            cnt_boss = 0
            for h in all_data:
                hero_h = all_data[h]
                if hero_h.go_boss == hero.go_boss:
                    cnt_boss += 1
            if cnt_boss == 5:
                await boss_fight(hero.go_boss)
            else:
                await update.message.reply_text("–≤—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–æ—Å—Å–∞")
        else:
            await update.message.reply_text("—É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Å—Å–∞")


    elif "/ustf_" in msg_txt:
        code = msg_txt.replace("/ustf_", "")
        if len(code) > 100:
            return
        data_ = hero.stock.use_stuff(int(code), hero)
        await update.message.reply_text(data_)
        #await menu_sel(update, hero, data_)

    elif "/drop" == msg_txt:
        data = hero.stock.get_delete()

    elif msg_txt.startswith("/drw_") or msg_txt.startswith("/dra_"):
        i = msg_txt.replace("/drw_", "").replace("/dra_", "")
        if len(i) > 100:
            return
        if hero.stock.equip.get(i, None):
            data = f"–≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?{hero.stock.equip.get(i).get_name()}\n"
            i_new = msg_txt.replace("/drw_", "/drww_").replace("/dra_", "/draa_")
            data += i_new
        else:
            data = "–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è\n"
    elif msg_txt.startswith("/drww_") or msg_txt.startswith("/draa_"):
        i = msg_txt.replace("/drww_", "").replace("/draa_", "")
        if len(i) > 100:
            return
        i_del = hero.stock.equip.pop(i)
        data = f"—É–¥–∞–ª–µ–Ω–æ {i_del.get_name()}"
    elif msg_txt.startswith("/eqw_"):
        w = msg_txt.replace("/eqw_", "")
        if len(w) > 100:
            return
        wp = hero.stock.equip.get(w, None)
        data_ = "–æ—à–∏–±–∫–∞"
        if wp:
            weapon = hero.stock.equip.pop(w)
            if hero.weapon:
                hero.stock.add_item(hero.weapon)
            hero.weapon = copy.copy(weapon)
            hero.weapon.use = 1
            #data_ = hero.stock.get_data()
            data_ = "—ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: " + hero.weapon.get_name()
        await menu_sel(update, hero, data_)
    elif msg_txt.startswith("/eqa_"):
        a = msg_txt.replace("/eqa_", "")
        if len(a) > 100:
            return
        ap = hero.stock.equip.get(a, None)
        data_ = "–æ—à–∏–±–∫–∞"
        if ap:
            i = int(a.split('t')[0])
            arm = hero.stock.equip.pop(a)
            if hero.armor[i]:
                hero.stock.add_item(hero.armor[i])

            hero.armor[i] = copy.copy(arm)
            hero.armor[i].use = 1
            data_ = "—ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: " + hero.armor[i].get_name()
            #data_ = hero.stock.get_data()
        await menu_sel(update, hero, data_)

    elif msg_txt.startswith("/sw_") and hero.km == 0:
        w = msg_txt.replace("/sw_", "")
        if len(w) > 100:
            return
        wp = hero.stock.equip.get(w, None)
        if wp:
            w = hero.stock.equip.pop(w)
            hero.materials += w.calc_cost()
            out = f"üì¶√ó{hero.materials}\n"
            out += hero.stock.get_data_lombard()
            await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt.startswith("/sa_") and hero.km == 0:
        a = msg_txt.replace("/sa_", "")
        if len(a) > 100:
            return
        ap = hero.stock.equip.get(a, None)
        if ap:
            a = hero.stock.equip.pop(a)
            hero.materials += a.calc_cost()
            out = f"üì¶√ó{hero.materials}\n"
            out += hero.stock.get_data_lombard()
            await update.message.reply_text(out, reply_markup=menu_lomb())
    elif msg_txt.startswith("/givecoin") and hero.km == 0:
        #id = "48"
        a = msg_txt.replace("/givecoin", "")
        id = a.split("id")[0]
        coins = a.split("id")[1]
        for h in all_data:
            hero_h = all_data[h]
            if hero_h.base_id == int(id):
                hero_h.coins = int(coins)
                break

    elif msg_txt.startswith("/bw_") and hero.km == 0:
        if len(hero.stock.equip) >= hero.stock.MAX_EQUIP:
            data = "—Ä—é–∫–∑–∞–∫ –ø–æ–ª–æ–Ω"
        else:
            weapon_dmg = msg_txt.replace("/bw_", "")
            if len(weapon_dmg) > 100:
                return
            buy_weapon = None
            for weapon in weapons_all:
                if str(weapon.dmg) == weapon_dmg:
                    buy_weapon = weapon
                    break

            if buy_weapon:
                cost = buy_weapon.calc_cost()
                if cost <= hero.coins:
                    hero.stock.add_item(buy_weapon)
                    hero.coins -= cost
                    data = f"–≤—ã –∫—É–ø–∏–ª–∏ {buy_weapon.get_name()}"
                else:
                    data = "–Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
    elif msg_txt.startswith("/ba_") and hero.km == 0:
        if len(hero.stock.equip) >= hero.stock.MAX_EQUIP:
            data = "—Ä—é–∫–∑–∞–∫ –ø–æ–ª–æ–Ω"
        else:
            buy_arm_code = msg_txt.replace("/ba_", "").split('t')
            buy_arm_type = buy_arm_code[0]
            buy_arm_val = buy_arm_code[1]
            buy_arm = None
            if buy_arm_type in ['0', '1', '2']:
                for ar in armor_all[int(buy_arm_type)]:
                    if str(ar.arm) == buy_arm_val:
                        buy_arm = ar
                        break
            if buy_arm:
                cost = buy_arm.calc_cost()
                if cost <= hero.coins:
                    hero.stock.add_item(buy_arm)
                    hero.coins -= cost
                    data = f"–≤—ã –∫—É–ø–∏–ª–∏ {buy_arm.get_name()}"
                else:
                    data = "–Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
    elif msg_txt.startswith("/module") and hero.km == 0:
        i_mod = msg_txt.replace("/module", "")
        try:
            if 0 <= int(i_mod) <= 7:
                data = hero.activate_module(int(i_mod))
        except Exception as e:
            pass
    elif "/buy_dr_1" == msg_txt and hero.km == 0:
        if hero.coins > 200000:
            hero.drone = copy.copy(all_drones[0])
            hero.coins -= 200000
            data = "–≤—ã –∫—É–ø–∏–ª–∏ –¥—Ä–æ–Ω–∞!"
        else:
            data = "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä—ã—à–µ–∫((("
    elif "/dzen" == msg_txt and hero.km == 30 and hero.zone == 1:
        data = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ üï≥{round(hero.coins)} –≤ –¥–∑–µ–Ω\n"
        hero.dzen += hero.coins
        hero.coins = 0
        data += f"–ù–∞–±—Ä–∞–Ω–æ üï≥{hero.get_in_dzen()} –∏–∑ üï≥{hero.get_coins_to_dzen()}\n"
    elif "/make_band" == msg_txt and hero.km == 27 and hero.zone <= 1:
        if hero.coins >= 30000:
            hero.band_name = "–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞–Ω–¥—ã"
            data = "–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞–Ω–¥—ã"
            hero.coins -= 30000
        else:
            data = "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä—ã—à–µ–∫((("
    elif msg_txt == "/leave_band" and hero.km == 27 and hero.zone <= 1:
        if hero.band_name and hero.band_name != "":
            hero.band_name = ""
            data = f"–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–∞–Ω–¥—É {hero.band_name}(((!!"
            await upd_hero_db(async_session, hero)
        else:
            data = f"–≤—ã –Ω–µ –≤ –±–∞–Ω–¥–µ!!"
    elif msg_txt.startswith("/add_band") and hero.km == 27 and hero.zone <= 1:
        iduser = int(msg_txt.replace("/add_band", ""))
        for h in all_data:
            hero_h = all_data[h]
            if hero_h.all_km == iduser and (hero_h.band_name == None or hero_h.band_name == ""):
                hero_h.band_name = hero.band_name
                data = f"–≤—ã –≤–∑—è–ª–∏ –∏–≥—Ä–æ–∫–∞ {hero_h.get_name()} –≤ –±–∞–Ω–¥—É {hero.band_name}!!"
                await upd_hero_db(async_session, hero_h)
                break

    elif hero.km == 52 and "/deeprest" == msg_txt:
        hero.hungry = 0
        await menu_sel(update, hero, "–≤—ã –ø–æ–∫—É—à–∞–ª–∏")

    elif "/mobs" == msg_txt:
        if hero.mobs:
            data = "–ú–æ–±—ã –≤ –∫–æ–º–∞–Ω–¥–µ:\n"
            for m in hero.mobs:
                data += f"{m.get_name()}\n"
    elif "/clr_mobs" == msg_txt:
        if hero.mobs:
            hero.mobs = []
            data = "–≤—ã –≤—ã–∫–∏–Ω—É–ª–∏ –º–æ–±–æ–≤"
    #elif "/perksx" == msg_txt and hero.id == 1:
    #    hero.perks = '0' * 6
    elif "/min_log" == msg_txt:
        hero.min_log = not hero.min_log
    elif "/perks" == msg_txt:
        data = hero.return_perks()
    elif "/perk_" in msg_txt and hero.free_perks():
        if msg_txt == "/perk_force":
            data = hero.inc_perk(0)
        if msg_txt == "/perk_arm":
            data = hero.inc_perk(1)
        if msg_txt == "/perk_dex":
            data = hero.inc_perk(2)
        if msg_txt == "/perk_accur":
            data = hero.inc_perk(3)
        if msg_txt == "/perk_char":
            data = hero.inc_perk(4)
        if msg_txt == "/perk_luck":
            data = hero.inc_perk(5)

    elif msg_txt.startswith("/mod_"):
        a = msg_txt.replace("/mod_", "")
        ap = hero.stock.equip.get(a.split('m')[0], None)
        data_ = "–æ—à–∏–±–∫–∞"
        if ap and not ap.mod:
            code = int(a.split('m')[1])
            ap.mod = code
            if hero.accuracy < 300 or hero.luck < 300 or hero.dexterity < 300 :
                await update.message.reply_text("–ø–æ–≤—ã—Å—å—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏, –ª–æ–≤–∫–æ—Å—Ç–∏ –∏ —É–¥–∞—á–∏ –¥–æ 300")
                return
            data_ = f"{ap.name} —É–ª—É—á—à–µ–Ω–æ"
            stf = hero.stock.used_stuff.get(code, None)
            if stf:
                if hero.stock.used_stuff[code] == 1:
                    hero.stock.used_stuff.pop(code)
                else:
                    hero.stock.used_stuff[code] -= 1

        await menu_sel(update, hero, data_)
    #await update.message.reply_markdown_v2(text=data)
    if data != "":
        if hero.in_dange <= 0:
            #await update.message.reply_markdown_v2(data, reply_markup=menu_pip())
            await update.message.reply_text(data, reply_markup=menu_pip())
        else:
            #await update.message.reply_markdown_v2(data, reply_markup=menu_go_dange())
            await update.message.reply_text(data, reply_markup=menu_pip())


def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(token).build()

    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("me", me_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_msg))
    application.add_handler(MessageHandler(filters.COMMAND, comm_msg))

    # Run the bot until the user presses Ctrl-C
    application.run_polling()


if __name__ == "__main__":
    main()
